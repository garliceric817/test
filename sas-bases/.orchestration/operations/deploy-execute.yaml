apiVersion: orchestration.sas.com/v3beta4
kind: LifecycleOperation
metadata:
  annotations:
    sas.com/component-name: sas-k8s-common
    sas.com/component-version: 2.56.2-20220919.1663599580201
  creationTimestamp: null
  name: deploy-execute
spec:
  args:
  - name: namespace
  - name: manifest
  - name: timeout
  source: "package main\n\nimport (\n\t\"regexp\"\n\t\"strconv\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\tlifecycle \"sas/orchestration/lifecycle\"\n)\n\nfunc main() {\n\tmanifest := lifecycle.Arg(\"manifest\")\n\tnamespace := lifecycle.Arg(\"namespace\")\n\ttimeout := lifecycle.Arg(\"timeout\")\n\n\tminorVersion := getApiMinorVersion()\n\tretries := 3\n\tretryWait := 6\n\n\tclusterWide(manifest, timeout, namespace)\n\tclusterLocal(manifest, minorVersion, timeout, namespace, retries, retryWait)\n\tclusterAdmin(manifest, minorVersion, timeout, namespace, retries, retryWait)\n\tistio(manifest, timeout, namespace, retries, retryWait)\n}\n\n// The default prune list in kubernetes 1.18.8 can be found at\n// https://github.com/kubernetes/kubernetes/blob/9f2892aab98fe339f3bd70e3c470144299398ace/staging/src/k8s.io/kubectl/pkg/cmd/apply/prune.go#L172\n// In order to facilitate adding new entries to the prune list without\n// adding new `kubectl apply` executions, those default entries are\n// explicitly listed here.\n// In addition, as versions introduce new GVKs and retire older GVKs, we\n// have to adjust the list to ensure it is doing only those we expect it to.\nfunc getCommonAllowList(minorVersion uint) []string {\n\tallowList := []string{\n\t\t\"core/v1/ConfigMap\",\n\t\t\"core/v1/Endpoints\",\n\t\t\"core/v1/Namespace\",\n\t\t\"core/v1/PersistentVolumeClaim\",\n\t\t\"core/v1/PersistentVolume\",\n\t\t\"core/v1/Pod\",\n\t\t\"core/v1/ReplicationController\",\n\t\t\"core/v1/Secret\",\n\t\t\"core/v1/Service\",\n\t\t\"batch/v1/Job\",\n\t\t\"apps/v1/DaemonSet\",\n\t\t\"apps/v1/Deployment\",\n\t\t\"apps/v1/ReplicaSet\",\n\t\t\"apps/v1/StatefulSet\",\n\t}\n\n\t// Introductions\n\tif minorVersion >= 21 {\n\t\tallowList = append(allowList, \"batch/v1/CronJob\")\n\t}\n\tif minorVersion >= 22 {\n\t\t// This came out in 1.19, but this file's previous logic introduced\n\t\t// it in 1.22. Retaining that behavior for backward compatibility.\n\t\tallowList = append(allowList, \"networking.k8s.io/v1/Ingress\")\n\t}\n\n\t// Retirements\n\tif minorVersion < 22 {\n\t\tallowList = append(allowList, \"extensions/v1beta1/Ingress\")\n\t}\n\tif minorVersion < 25 {\n\t\tallowList = append(allowList, \"batch/v1beta1/CronJob\")\n\t}\n\n\treturn allowList\n}\n\nfunc getApiMinorVersion() uint {\n    _, serverVersion, err := lifecycle.KubernetesClientAndServerVersion()\n    if err != nil {\n\t\tpanic(err)\n\t}\n\treturn serverVersion.Minor()\n}\n\nfunc hasGroupVersion(gv string) bool {\n\tversionList, err := lifecycle.Kubectl(\"api-versions\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tre := regexp.MustCompile(`\\b` + gv + `\\b`)\n\treturn re.MatchString(versionList)\n}\n\nfunc clusterWide(manifest string, timeout string, namespace string) {\n\tcmdArgs := []string{\n\t\t\"apply\",\n\t\t\"--timeout\", timeout,\n\t\t\"--namespace\", namespace,\n\t\t\"--selector\", \"sas.com/admin=cluster-wide\",\n\t}\n\tcmdArgs = append(cmdArgs, \"-f\", manifest)\n\n\t_, err := lifecycle.Kubectl(cmdArgs...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc clusterLocal(manifest string, minorVersion uint, timeout string, namespace string, retries int, retryWait int) {\n\tallowList := getCommonAllowList(minorVersion)\n\tcmdArgs := []string{\n\t\t\"apply\",\n\t\t\"--timeout\", timeout,\n\t\t\"--namespace\", namespace,\n\t\t\"--selector\", \"sas.com/admin=cluster-local\",\n\t}\n\tcmdArgs = append(cmdArgs, \"--prune\")\n\tfor _, item := range allowList {\n\t\tcmdArgs = append(cmdArgs, \"--prune-whitelist\", item)\n\t}\n\tcmdArgs = append(cmdArgs, \"-f\", manifest)\n\n\t_, err := lifecycle.KubectlWithRetry(retries, retryWait, cmdArgs...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc clusterAdmin(manifest string, minorVersion uint, timeout string, namespace string, retries int, retryWait int) {\n\tallowList := getCommonAllowList(minorVersion)\n\tallowList = append(allowList, \"autoscaling/v2beta2/HorizontalPodAutoscaler\")\n\tcmdArgs := []string{\n\t\t\"apply\",\n\t\t\"--timeout\", timeout,\n\t\t\"--namespace\", namespace,\n\t\t\"--selector\", \"sas.com/admin=namespace\",\n\t}\n\tcmdArgs = append(cmdArgs, \"--prune\")\n\tfor _, item := range allowList {\n\t\tcmdArgs = append(cmdArgs, \"--prune-whitelist\", item)\n\t}\n\tcmdArgs = append(cmdArgs, \"-f\", manifest)\n\n\t_, err := lifecycle.KubectlWithRetry(retries, retryWait, cmdArgs...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc istio(manifest string, timeout string, namespace string, retries int, retryWait int) {\n\tif !hasGroupVersion(\"networking.istio.io/v1alpha3\") {\n\t\treturn\n\t}\n\tallowList := []string{\n\t\t\"networking.istio.io/v1alpha3/DestinationRule\",\n\t\t\"networking.istio.io/v1alpha3/VirtualService\",\n\t}\n\tcmdArgs := []string{\n\t\t\"apply\",\n\t\t\"--timeout\", timeout,\n\t\t\"--namespace\", namespace,\n\t\t\"--selector\", \"sas.com/admin=namespace\",\n\t}\n\tcmdArgs = append(cmdArgs, \"--prune\")\n\tfor _, item := range allowList {\n\t\tcmdArgs = append(cmdArgs, \"--prune-whitelist\", item)\n\t}\n\tcmdArgs = append(cmdArgs, \"-f\", manifest)\n\n\t_, err := lifecycle.KubectlWithRetry(retries, retryWait, cmdArgs...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
