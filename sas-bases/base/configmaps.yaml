apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: input
literals:
- IMAGE_REGISTRY=cr.sas.com
---
apiVersion: builtin
kind: ConfigMapGenerator
labels:
  orchestration.sas.com/lifecycle: image
options:
  labels:
    orchestration.sas.com/lifecycle: image
metadata:
  name: sas-lifecycle-image
literals:
  - image=cr.sas.com/viya-4-x64_oci_linux_2-docker/sas-orchestration:1.80.3-20221102.1667411355996
  - registry=cr.sas.com
---
apiVersion: builtin
kind: ConfigMapGenerator
labels:
  orchestration.sas.com/lifecycle: operations
options:
  labels:
    orchestration.sas.com/lifecycle: operations
metadata:
  name: sas-lifecycle-operations
literals:
  - |
    assess=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        lifecycle.orchestration.sas.com/publish: "true"
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: assess
    spec:
      args:
      - name: namespace
      - name: manifest
      - default: 7200s
        name: timeout
      steps:
      - always: true
        args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/assess=true
  - |
    assess-cas=apiVersion: orchestration.sas.com/v2beta12
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/assess: "true"
      name: assess-cas
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - cas.sas.com/operator_manifest_version
        - (.Annotation "sas.com/component-version" $resource)
        cmd: set_variable
        withManifestResources:
          group: apps
          kind: Deployment
          manifest: $manifest
          name: sas-cas-operator
          version: v1
      - args:
        - cas.sas.com/operator_cluster_version
        - (.Annotation "sas.com/component-version" $resource)
        cmd: set_variable
        withClusterResources:
          group: apps
          name: sas-cas-operator
          namespace: $namespace
          resource: deployment
          version: v1
      - args:
        - cas.sas.com/update
        - "true"
        cmd: set_variable
        when: |-
          (and
            (.VariableExists "cas.sas.com/operator_manifest_version" )
            (.VariableExists "cas.sas.com/operator_cluster_version" )
            (ne
              (.GetVariable "cas.sas.com/operator_manifest_version")
              (.GetVariable "cas.sas.com/operator_cluster_version")
            )
          )
      - args:
        - cas.sas.com/server_manifest_version
        - (.Coalesce (index ($resource | .ToObject).data "SAS_COMPONENT_VERSION_sas-cas-server") "")
        cmd: set_variable
        withManifestResources:
          kind: ConfigMap
          labelSelector: orchestration.sas.com/lifecycle=components
          manifest: $manifest
      - args:
        - cas.sas.com/server_cluster_version
        - (.Coalesce (index ($resource | .ToObject).data "SAS_COMPONENT_VERSION_sas-cas-server") "")
        cmd: set_variable
        withClusterResources:
          labelSelector: orchestration.sas.com/lifecycle=components
          namespace: $namespace
          resource: configmap
      - args:
        - cas.sas.com/update
        - "true"
        cmd: set_variable
        when: |-
          (and
            (and
              (.VariableExists "cas.sas.com/server_manifest_version")
              (ne (.GetVariable "cas.sas.com/server_manifest_version") "")
            )
            (and
              (.VariableExists "cas.sas.com/server_cluster_version" )
              (ne (.GetVariable "cas.sas.com/server_cluster_version") "")
            )
            (ne
              (.GetVariable "cas.sas.com/server_manifest_version")
              (.GetVariable "cas.sas.com/server_cluster_version")
            )
          )
  - |
    assess-crunchy=apiVersion: orchestration.sas.com/v2beta11
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-data-server-operator
        sas.com/component-version: 21.15.7-20221212.1670882997958
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/assess: "true"
      name: assess-crunchy
    spec:
      args:
      - name: namespace
        required: true
      - name: manifest
        required: true
      steps:
      - args:
        - dataserver.sas.com/crunchy-v1beta1-crds-manifest
        - "true"
        cmd: set_variable
        when: |-
          (and
            (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "Deployment").WithName "sas-crunchy-data-postgres-operator"))
            ( not (.ManifestResource $manifest ((((((.NewManifestResourcesIterationSpec).WithGroup "apiextensions.k8s.io").WithVersion "v1").WithKind "CustomResourceDefinition").WithName "pgclusters.crunchydata.com").WithAnnotationSelector "sas.com/crunchy-crd-version=v1")))
          )
      - args:
        - dataserver.sas.com/crunchy-v1-crds-cluster
        - "true"
        cmd: set_variable
        when: (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithGroup "apiextensions.k8s.io").WithVersion "v1").WithResource "customresourcedefinitions").WithName "pgclusters.crunchydata.com").WithAnnotationSelector "sas.com/crunchy-crd-version=v1"))
      - args:
        - cannot apply Crunchydata v1beta1 CRDs when Crunchydata v1 CRDs already present
        cmd: fail
        when: |-
          (and
            (.GetVariable "dataserver.sas.com/crunchy-v1beta1-crds-manifest")
            (.GetVariable "dataserver.sas.com/crunchy-v1-crds-cluster")
          )
  - |
    cluster-api=apiVersion: orchestration.sas.com/v3beta1
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: cluster-api
    spec:
      args:
      - name: clusterApiManifest
      - name: clusterApiNamespace
      - name: timeout
      source: |-
        package main
        import (
          "fmt"
          "sas/orchestration/lifecycle"
        )
        func main() {
          manifest := lifecycle.Arg("clusterApiManifest")
          namespace := lifecycle.Arg("clusterApiNamespace")
          timeout := lifecycle.Arg("timeout")
          if namespace != "" {
            err := lifecycle.StartLeading(namespace)
            if err != nil {
              fmt.Printf("%v\n", err)
              return
            }
            defer lifecycle.StopLeading(namespace)
          }
          err := lifecycle.Run("cluster-api-assess", "--clusterApiManifest", manifest, "--clusterApiNamespace", namespace, "--timeout", timeout)
          if err != nil {
            fmt.Printf("%v\n", err)
            return
          }
          err = lifecycle.Run("cluster-api-deploy", "--clusterApiManifest", manifest, "--clusterApiNamespace", namespace, "--timeout", timeout)
          if err != nil {
            fmt.Printf("%v\n", err)
            return
          }
        }
  - |
    cluster-api-assess=apiVersion: orchestration.sas.com/v3beta6
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: cluster-api-assess
    spec:
      args:
      - name: clusterApiManifest
        required: true
      - name: clusterApiNamespace
      libraries:
      - cluster-api-lib
      source: |-
        package main
        import (
          "fmt"
          "sas/orchestration/lifecycle"
          m "sas/orchestration/lifecycle/manifest"
          c "sas/orchestration/lifecycle/cluster"
          ca "sas/orchestration/lifecycle/cadence"
        )
        func main() {
          manifest := lifecycle.Arg("clusterApiManifest")
          resources, err := m.Resources(manifest, m.Group("apiextensions.k8s.io"), m.Kind("CustomResourceDefinition"), m.LabelSelector("sas.com/admin=cluster-api"))
          if err != nil {
            fmt.Printf("%v\n", err)
            return
          }
          for _, manifestCrd := range resources {
            name := clusterapilib.nameOf(manifestCrd)
            clusterCrd := clusterapilib.getClusterCrd(name)
            validate(manifestCrd, clusterCrd)
          }
        }
        func validate(manifestCrd, clusterCrd *lifecycle.Resource) {
          // If nothing is in the cluster then the update is valid
          if clusterCrd == nil {
            return
          }
          clusterApiNamespace := lifecycle.Arg("clusterApiNamespace")
          manifestCrdConversionStrategy := clusterapilib.conversionStrategyOf(manifestCrd)
          clusterCrdConversionStrategy := clusterapilib.conversionStrategyOf(clusterCrd)
          clusterCrdWebhookNamespace := clusterapilib.webhookNamespaceOf(clusterCrd)
  
          // Calculate if update is "allowed"
          namespace := lifecycle.Arg("clusterApiNamespace")
          kind := clusterapilib.kindOf(clusterCrd)
          name := clusterapilib.nameOf(clusterCrd)
          clusterInfo := clusterapilib.MustGetClusterVersionInfo(namespace, kind, name)
          manifestInfo := clusterapilib.GetManifestVersionInfo(manifestCrd)
          updateError := ca.VerifyUpdateIsAllowed(clusterInfo, manifestInfo)
  
          // If
          // * no clusterApiNamespace is specified
          // * the conversion strategy is webhook
          // * the CRD in the manifest is an update
          // then the update is not valid.
          if clusterApiNamespace == "" &&
            manifestCrdConversionStrategy == "Webhook" && updateError == nil {
            name := clusterapilib.nameOf(manifestCrd)
            lifecycle.Fail(fmt.Sprintf("CRD %s is being updated and requires clusterApiNamespace to be specified", name))
          }
          // If
          // * clusterApiNamespace is specified
          // * the CRD in the cluster has a webhook namespace
          // * the CRD in the manifest has a webhook conversion strategy
          // * the clusterApiNamespace is different than what is already in the CRD in the cluster
          // then the update is not valid.
          if clusterApiNamespace != "" &&
            clusterCrdWebhookNamespace != "" &&
            manifestCrdConversionStrategy == "Webhook" &&
            clusterApiNamespace != clusterCrdWebhookNamespace {
            lifecycle.Fail(fmt.Sprintf("Cluster CRD conversion.webhook.namespace is immutable and currently set to %s", clusterCrdWebhookNamespace))
          }
        }
  - |
    cluster-api-deploy=apiVersion: orchestration.sas.com/v3beta6
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: cluster-api-deploy
    spec:
      args:
      - name: clusterApiManifest
        required: true
      - name: clusterApiNamespace
      - default: 2700s
        name: timeout
      libraries:
      - cluster-api-lib
      source: |-
        package main
        import (
          "fmt"
          "encoding/json"
          "sas/orchestration/lifecycle"
          m "sas/orchestration/lifecycle/manifest"
          c "sas/orchestration/lifecycle/cluster"
          ca "sas/orchestration/lifecycle/cadence"
        )
        func main() {
          manifest := lifecycle.Arg("clusterApiManifest")
          resources := m.Resources(manifest, m.LabelSelector("sas.com/admin=cluster-api"))
          for _, resource := range resources {
            kind := clusterapilib.kindOf(resource)
            if kind == "CustomResourceDefinition" {
              deployCrd(resource)
            } else {
              deployWebhook(resource)
            }
          }
        }
        func deployCrd(resource *lifecycle.Resource) {
          namespace := lifecycle.Arg("clusterApiNamespace")
          kind := clusterapilib.kindOf(resource)
          name := clusterapilib.nameOf(resource)
  
          clusterInfo := clusterapilib.MustGetClusterVersionInfo(namespace, kind, name)
          manifestInfo := clusterapilib.GetManifestVersionInfo(resource)
          updateError := ca.VerifyUpdateIsAllowed(clusterInfo, manifestInfo)
  
          if updateError == nil {
            // Incoming crd is newer.  Go ahead and apply
            timeout := lifecycle.Arg("timeout")
            resourceBytes, err := json.Marshal(resource.Value())
            if err != nil {
              panic(err)
            }
            _, err = lifecycle.KubectlWithStdin(string(resourceBytes), "apply", "--timeout", timeout, "--namespace", namespace, "--server-side", "--force-conflicts", "-f", "-")
            if err != nil {
              panic(err)
            }
            _, err = lifecycle.Kubectl("wait", "--for", "condition=established", "--timeout", timeout, "crd", name)
            lifecycle.Log(fmt.Sprintf("The CRD %s will be applied.", name))
          } else {
            lifecycle.Log(fmt.Sprintf("The CRD %s will not be applied. A newer CRD by that name exists in the cluster.", name))
          }
        }
        func deployWebhook(resource *lifecycle.Resource) {
          namespace := lifecycle.Arg("clusterApiNamespace")
          kind := clusterapilib.kindOf(resource)
          name := clusterapilib.nameOf(resource)
          clusterInfo := clusterapilib.MustGetClusterVersionInfo(namespace, kind, name)
          manifestInfo := clusterapilib.GetManifestVersionInfo(resource)
          updateError := ca.VerifyUpdateIsAllowed(clusterInfo, manifestInfo)
  
          if updateError == nil {
            // Incoming webhook is newer.  Go ahead and apply
            timeout := lifecycle.Arg("timeout")
            resourceBytes, err := json.Marshal(resource.Value())
            if err != nil {
              panic(err)
            }
            _, err = lifecycle.KubectlWithStdin(string(resourceBytes), "apply", "--timeout", timeout, "--namespace", namespace, "-f", "-")
            if err != nil {
              panic(err)
            }
            lifecycle.Log(fmt.Sprintf("The webhook %s will be applied.", name))
          } else {
            lifecycle.Log(fmt.Sprintf("The webhook %s will not be applied. A newer webhook by that name exists in the cluster.", name))
          }
        }
  - |
    cluster-api-lib=apiVersion: orchestration.sas.com/v3beta6
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: cluster-api-lib
    spec:
      source: |-
        package clusterapilib
        import (
          "fmt"
          "sas/orchestration/lifecycle"
          c "sas/orchestration/lifecycle/cluster"
          ca "sas/orchestration/lifecycle/cadence"
        )
        func getClusterCrd(name string) *lifecycle.Resource {
          clusterCrds := c.Resources(c.Group("apiextensions.k8s.io"), c.Resource("CustomResourceDefinition"), c.Name(name))
          if len(clusterCrds) > 1 {
            panic(fmt.Sprintf("Expected one Resource but got more than one: %v", clusterCrds))
          }
          if len(clusterCrds) == 0 {
            return nil
          }
          return clusterCrds[0]
        }
        func kindOf(o *lifecycle.Resource) string {
          kindI := o.F("kind").Value()
          kind, ok := kindI.(string)
          if !ok {
            panic(fmt.Sprintf("no kind found for resource: %v", o.Value()))
          }
          return kind
        }
        func annotationOf(o *lifecycle.Resource, name string) string {
          annotationI := o.F("metadata").F("annotations").F(name).Value()
          annotation, ok := annotationI.(string)
          if !ok {
            return ""
          }
          return annotation
        }
        func nameOf(o *lifecycle.Resource) string {
          nameI := o.F("metadata").F("name").Value()
          name, ok := nameI.(string)
          if !ok {
            panic(fmt.Sprintf("no name found for resource: %v", o.Value()))
          }
          return name
        }
        func versionsOf(o *lifecycle.Resource) int {
          versionsI := o.F("spec").F("versions").Value()
          versions, ok := versionsI.([]interface{})
          if !ok {
            return 1
          }
          return len(versions)
        }
        func conversionStrategyOf(o *lifecycle.Resource) string {
          conversionStrategyI := o.F("spec").F("conversion").F("strategy").Value()
          conversionStrategy, ok := conversionStrategyI.(string)
          if !ok {
            return "None"
          }
          return conversionStrategy
        }
        func webhookNamespaceOf(o *lifecycle.Resource) string {
          webhookNamespaceI := o.F("spec").F("conversion").F("webhook").F("clientConfig").F("service").F("namespace").Value()
          webhookNamespace, ok := webhookNamespaceI.(string)
          if !ok {
            return ""
          }
          return webhookNamespace
        }
        // *********************************
        // Version check functions
        // *********************************
        func GetManifestVersionInfo(resource *lifecycle.Resource) ca.CadenceInfo {
          return ca.NewCadenceInfoFromAnnotations(resource)
        }
        func MustGetClusterVersionInfo(namespace, kind, name string) ca.CadenceInfo {
          resources, err := c.Resources(c.Namespace(namespace), c.Resource(kind), c.Name(name))
          if err != nil {
            panic(err)
          }
          if len(resources) > 1 {
            panic(fmt.Sprintf("Namespace %s contains multiple webhook resources with name %s", namespace, name))
          }
          if len(resources) == 0 {
             return nil
          }
          return ca.NewCadenceInfoFromAnnotations(resources[0])
        }
  - |
    deploy=apiVersion: orchestration.sas.com/v2beta13
    kind: LifecycleOperation
    metadata:
      annotations:
        lifecycle.orchestration.sas.com/publish: "true"
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: deploy
    spec:
      args:
      - name: namespace
        required: true
      - name: manifest
      - name: clusterApiManifest
      - default: 7200s
        name: timeout
      - name: deploymentDir
      - name: serviceAccountName
      - name: clusterApiNamespace
      steps:
      - args:
        - $namespace
        cmd: start_leading
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - configmap
        - sas-deploy-lifecycle-operation-variables
        cmd: kubectl
      - args:
        - create
        - --namespace
        - $namespace
        - configmap
        - sas-deploy-lifecycle-operation-variables
        cmd: kubectl
      - args:
        - deploy-assess
        - --namespace
        - $namespace
        - --deploymentDir
        - $deploymentDir
        - --timeout
        - $timeout
        - --serviceAccountName
        - $serviceAccountName
        - --manifest
        - $manifest
        cmd: run
      - args:
        - cluster-api
        - --timeout
        - $timeout
        - --clusterApiManifest
        - $clusterApiManifest
        - --clusterApiNamespace
        - $clusterApiNamespace
        cmd: run
        when: $clusterApiManifest
      - args:
        - deploy-stage
        - --namespace
        - $namespace
        - --deploymentDir
        - $deploymentDir
        - --timeout
        - $timeout
        - --serviceAccountName
        - $serviceAccountName
        - --manifest
        - $manifest
        cmd: run
      - args:
        - deploy-pre
        - --namespace
        - $namespace
        - --deploymentDir
        - $deploymentDir
        - --timeout
        - $timeout
        - --serviceAccountName
        - $serviceAccountName
        - --manifest
        - $manifest
        cmd: run
      - args:
        - deploy-execute
        - --namespace
        - $namespace
        - --deploymentDir
        - $deploymentDir
        - --timeout
        - $timeout
        - --serviceAccountName
        - $serviceAccountName
        - --manifest
        - $manifest
        cmd: run
      - args:
        - deploy-post
        - --namespace
        - $namespace
        - --deploymentDir
        - $deploymentDir
        - --timeout
        - $timeout
        - --serviceAccountName
        - $serviceAccountName
        - --manifest
        - $manifest
        cmd: run
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - configmap
        - sas-deploy-lifecycle-operation-variables
        cmd: kubectl
      - always: true
        args:
        - $namespace
        cmd: stop_leading
  - |
    deploy-assess=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: deploy-assess
    spec:
      args:
      - name: namespace
      - name: manifest
      - name: timeout
      - name: deploymentDir
      - name: serviceAccountName
      steps:
      - always: true
        args:
        - assess
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run
      - always: true
        args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/deploy-assess=true
      - always: true
        args:
        - deploy-assess-commonfiles
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run_when_exists
      - always: true
        args:
        - deploy-assess-consul
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run_when_exists
      - always: true
        args:
        - deploy-assess-elasticsearch
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run_when_exists
      - always: true
        args:
        - deploy-assess-rabbitmq
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run_when_exists
  - |
    deploy-assess-cachelocator=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-cachelocator
        sas.com/component-version: 1.30.5-20221103.1667487469808
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/deploy-assess: "true"
      name: deploy-assess-cachelocator
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - deploy-assess-cachelocator-execute
        - --namespace
        - $namespace
        cmd: run
        when: |-
          (and
            (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "StatefulSet").WithName "sas-cachelocator"))
            (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "statefulset").WithName "sas-cachelocator"))
            (ne
              (.Annotation "sas.com/component-version" (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "StatefulSet").WithName "sas-cachelocator")))
              (.Annotation "sas.com/component-version" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "statefulset").WithName "sas-cachelocator")))
            )
          )
  - |
    deploy-assess-cachelocator-execute=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-cachelocator
        sas.com/component-version: 1.30.5-20221103.1667487469808
      creationTimestamp: null
      name: deploy-assess-cachelocator-execute
    spec:
      steps:
      - args:
        - sas.com/sas-cachelocator-update
        - "true"
        cmd: set_variable
  - |
    deploy-assess-cacheserver=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-cacheserver
        sas.com/component-version: 1.30.5-20221103.1667487495149
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/deploy-assess: "true"
      name: deploy-assess-cacheserver
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - deploy-assess-cacheserver-execute
        - --namespace
        - $namespace
        cmd: run
        when: |-
          (and
            (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "StatefulSet").WithName "sas-cacheserver"))
            (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "statefulset").WithName "sas-cacheserver"))
            (ne
              (.Annotation "sas.com/component-version" (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "StatefulSet").WithName "sas-cacheserver")))
              (.Annotation "sas.com/component-version" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "statefulset").WithName "sas-cacheserver")))
            )
          )
  - |
    deploy-assess-cacheserver-execute=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-cacheserver
        sas.com/component-version: 1.30.5-20221103.1667487495149
      creationTimestamp: null
      name: deploy-assess-cacheserver-execute
    spec:
      steps:
      - args:
        - sas.com/sas-cacheserver-update
        - "true"
        cmd: set_variable
  - |
    deploy-assess-commonfiles=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-commonfiles
        sas.com/component-version: 1.20.38-20221105.1667651273535
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-commonfiles
      name: deploy-assess-commonfiles
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - deploy-assess-commonfiles-execute
        - --namespace
        - $namespace
        cmd: run
        when: |-
          (and
            (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "batch").WithVersion "v1").WithKind "Job").WithName "sas-commonfiles"))
            (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "batch").WithVersion "v1").WithResource "job").WithName "sas-commonfiles"))
            (ne
              (.Annotation "sas.com/component-version" (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "batch").WithVersion "v1").WithKind "Job").WithName "sas-commonfiles")))
              (.Annotation "sas.com/component-version" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "batch").WithVersion "v1").WithResource "job").WithName "sas-commonfiles")))
            )
          )
  - |
    deploy-assess-commonfiles-execute=apiVersion: orchestration.sas.com/v2beta5
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-commonfiles
        sas.com/component-version: 1.20.38-20221105.1667651273535
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-commonfiles
      name: deploy-assess-commonfiles-execute
    spec:
      args:
      - name: namespace
      steps:
      - args:
        - annotate
        - --namespace
        - $namespace
        - configmap
        - sas-deploy-lifecycle-operation-variables
        - sas.com/sas-commonfiles-update=true
        cmd: kubectl
  - |
    deploy-assess-consul=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-consul-server
        sas.com/component-version: 1.1220001.7-20221104.1667563895075
      creationTimestamp: null
      name: deploy-assess-consul
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - deploy-assess-consul-execute
        - --namespace
        - $namespace
        cmd: run
        when: |-
          (and
            (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "StatefulSet").WithName "sas-consul-server"))
            (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "statefulset").WithName "sas-consul-server"))
            (ne
              (.Annotation "sas.com/component-version" (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "StatefulSet").WithName "sas-consul-server")))
              (.Annotation "sas.com/component-version" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "statefulset").WithName "sas-consul-server")))
            )
          )
  - |
    deploy-assess-consul-execute=apiVersion: orchestration.sas.com/v2beta5
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-consul-server
        sas.com/component-version: 1.1220001.7-20221104.1667563895075
      creationTimestamp: null
      name: deploy-assess-consul-execute
    spec:
      args:
      - name: namespace
      steps:
      - args:
        - annotate
        - --namespace
        - $namespace
        - configmap
        - sas-deploy-lifecycle-operation-variables
        - sas.com/sas-consul-server-update=true
        cmd: kubectl
  - |
    deploy-assess-dataserver=apiVersion: orchestration.sas.com/v2beta11
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-data-server-operator
        sas.com/component-version: 21.15.7-20221212.1670882997958
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/deploy-assess: "true"
      name: deploy-assess-dataserver
    spec:
      args:
      - name: namespace
        required: true
      steps:
      - args:
        - dataserver.sas.com/internal-postgres
        - "true"
        cmd: set_variable
        when: (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "deployment").WithName "sas-crunchy-data-postgres-operator"))
  - |
    deploy-assess-elasticsearch=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-opendistro-operator
        sas.com/component-version: 7.17.2-20221104.1667572603049
      creationTimestamp: null
      name: deploy-assess-elasticsearch
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - deploy-assess-elasticsearch-execute
        - --namespace
        - $namespace
        cmd: run
        when: |-
          (and
            (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "Deployment").WithName "sas-opendistro-operator"))
            (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "deployment").WithName "sas-opendistro-operator"))
            (ne
              (.Annotation "sas.com/component-version" (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "Deployment").WithName "sas-opendistro-operator")))
              (.Annotation "sas.com/component-version" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "deployment").WithName "sas-opendistro-operator")))
            )
          )
  - |
    deploy-assess-elasticsearch-execute=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-opendistro-operator
        sas.com/component-version: 7.17.2-20221104.1667572603049
      creationTimestamp: null
      name: deploy-assess-elasticsearch-execute
    spec:
      args:
      - name: namespace
      steps:
      - args:
        - annotate
        - --namespace
        - $namespace
        - configmap
        - sas-deploy-lifecycle-operation-variables
        - sas.com/sas-opendistro-operator-update=true
        cmd: kubectl
  - |
    deploy-assess-pyconfig-cronjob=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-pyconfig
        sas.com/component-version: 1.8.13-20221115.1668517533830
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-pyconfig
        participate.lifecycle.sas.com/deploy-assess: "true"
      name: deploy-assess-pyconfig-cronjob
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - deploy-assess-pyconfig-execute
        - --namespace
        - $namespace
        cmd: run
        when: (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "batch").WithVersion "v1").WithKind "CronJob").WithName "sas-pyconfig"))
  - |
    deploy-assess-pyconfig-execute=apiVersion: orchestration.sas.com/v2beta5
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-pyconfig
        sas.com/component-version: 1.8.13-20221115.1668517533830
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-pyconfig
      name: deploy-assess-pyconfig-execute
    spec:
      args:
      - name: namespace
      steps:
      - args:
        - annotate
        - --namespace
        - $namespace
        - configmap
        - sas-deploy-lifecycle-operation-variables
        - sas.com/sas-pyconfig-update=true
        - --overwrite
        cmd: kubectl
  - |
    deploy-assess-pyconfig-job=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-pyconfig
        sas.com/component-version: 1.8.13-20221115.1668517533830
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-pyconfig
        participate.lifecycle.sas.com/deploy-assess: "true"
      name: deploy-assess-pyconfig-job
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - deploy-assess-pyconfig-execute
        - --namespace
        - $namespace
        cmd: run
        when: (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "batch").WithVersion "v1").WithKind "job").WithName "sas-pyconfig"))
  - |
    deploy-assess-rabbitmq=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-rabbitmq-server
        sas.com/component-version: 3.821003.16-20221103.1667496983589
      creationTimestamp: null
      name: deploy-assess-rabbitmq
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - deploy-assess-rabbitmq-execute
        - --namespace
        - $namespace
        cmd: run
        when: |-
          (and
            (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "StatefulSet").WithName "sas-rabbitmq-server"))
            (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "statefulset").WithName "sas-rabbitmq-server"))
            (ne
              (.Annotation "sas.com/component-version" (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "apps").WithVersion "v1").WithKind "StatefulSet").WithName "sas-rabbitmq-server")))
              (.Annotation "sas.com/component-version" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "apps").WithVersion "v1").WithResource "statefulset").WithName "sas-rabbitmq-server")))
            )
          )
  - |
    deploy-assess-rabbitmq-execute=apiVersion: orchestration.sas.com/v2beta5
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-rabbitmq-server
        sas.com/component-version: 3.821003.16-20221103.1667496983589
      creationTimestamp: null
      name: deploy-assess-rabbitmq-execute
    spec:
      args:
      - name: namespace
      steps:
      - args:
        - annotate
        - --namespace
        - $namespace
        - configmap
        - sas-deploy-lifecycle-operation-variables
        - sas.com/sas-rabbitmq-server-update=true
        cmd: kubectl
  - |
    deploy-assess-sitedefault=apiVersion: orchestration.sas.com/v3beta1
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-consul-server
        sas.com/component-version: 1.1220001.7-20221104.1667563895075
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/assess: "true"
      name: deploy-assess-sitedefault
    spec:
      args:
      - name: namespace
        required: true
      - name: manifest
        required: true
      source: |-
        package main
  
        import (
          "encoding/base64"
          "encoding/yaml"
          "fmt"
          "regexp"
          "sas/orchestration/lifecycle"
          "strconv"
          "strings"
          m "sas/orchestration/lifecycle/manifest"
        )
  
        type SiteDefault struct {
          Config struct {
            Application struct {
              SasIdentitiesProvidersLdapConnection struct {
                Host     *string `json:"host"`
                Password *string `json:"password"`
                Port     *string `json:"port"`
                URL      *string `json:"url"`
                UserDN   *string `json:"userDN"`
              } `json:"sas.identities.providers.ldap.connection"`
              SasIdentitiesProvidersLdapGroup struct {
                BaseDN *string `json:"baseDN"`
              } `json:"sas.identities.providers.ldap.group"`
              SasIdentitiesProvidersLdapUser struct {
                BaseDN *string `json:"baseDN"`
              } `json:"sas.identities.providers.ldap.user"`
            } `json:"application"`
          } `json:"config"`
        }
  
        func main() {
          manifest := lifecycle.Arg("manifest")
          resources, err := m.Resources(manifest, m.Kind("Secret"), m.LabelSelector("sas.com/deployment=sas-viya"))
  
          for i := 0; i < len(resources); i++ {
            cname := getResourceName(resources[i])
            if strings.HasPrefix(cname, "sas-consul-config-") {
              var isAlphaNumeric = regexp.MustCompile(`^[a-zA-Z0-9]+$`).MatchString
  
              last := cname[strings.LastIndex(cname, "-")+1:]
              if isAlphaNumeric(last) {
                performValidation(resources[i])
                fmt.Println("sitedefault.yaml passed the yaml validation")
                break
              }
            }
          }
        }
  
        func getResourceName(secret *lifecycle.Resource) string {
          valueI := secret.F("metadata").F("name").Value()
          value, ok := valueI.(string)
          if !ok {
            return ""
          }
          return value
        }
  
        func getDataValue(secret *lifecycle.Resource, name string) string {
          valueI := secret.F("data").F(name).Value()
          value, ok := valueI.(string)
          if !ok {
            return ""
          }
          return value
        }
  
        func performValidation(r *lifecycle.Resource) {
          sdenc := getDataValue(r, "SITEDEFAULT_CONF")
  
          sd, err := base64.StdEncoding.DecodeString(sdenc)
          if err != nil {
            panic(err)
          }
          sdValidateData(sd)
        }
  
        func IsValidPortNumber(p string, max int) bool {
          //port number is an empty string
          if len(p) == 0 {
            return true
          }
          //catch floating and negative numbers
          if strings.Contains(p, ".") || strings.Contains(p, "-") {
            return false
          }
  
          //limit port number >0 and <2**(max-1)
          n, err := strconv.ParseInt(p, 10, max)
          if err != nil || n == 0 {
            return false
          }
          return true
        }
  
        func sdValidateData(data []byte) {
          sd := SiteDefault{}
          err := yaml.Unmarshal(data, &sd)
          if err != nil  {
            panic(err)
          }
          if sd == (SiteDefault{}) {
            fmt.Println("sitedefault LDAP struct is empty")
            return
          }
          port := sd.Config.Application.SasIdentitiesProvidersLdapConnection.Port
          if (port != nil) {
            if !IsValidPortNumber(*port, 17) {
              panic("Port number needs to be between 0 and 65536: (" + (*port) + ")")
            }
          } else {
            fmt.Println("sitedefault LDAP port undefined")
          }
        }
  - |
    deploy-execute=apiVersion: orchestration.sas.com/v3beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: deploy-execute
    spec:
      args:
      - name: namespace
      - name: manifest
      - name: timeout
      source: "package main\n\nimport (\n\t\"regexp\"\n\t\"strconv\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\tlifecycle \"sas/orchestration/lifecycle\"\n)\n\nfunc main() {\n\tmanifest := lifecycle.Arg(\"manifest\")\n\tnamespace := lifecycle.Arg(\"namespace\")\n\ttimeout := lifecycle.Arg(\"timeout\")\n\n\tminorVersion := getApiMinorVersion()\n\tretries := 3\n\tretryWait := 6\n\n\tclusterWide(manifest, timeout, namespace)\n\tclusterLocal(manifest, minorVersion, timeout, namespace, retries, retryWait)\n\tclusterAdmin(manifest, minorVersion, timeout, namespace, retries, retryWait)\n\tistio(manifest, timeout, namespace, retries, retryWait)\n}\n\n// The default prune list in kubernetes 1.18.8 can be found at\n// https://github.com/kubernetes/kubernetes/blob/9f2892aab98fe339f3bd70e3c470144299398ace/staging/src/k8s.io/kubectl/pkg/cmd/apply/prune.go#L172\n// In order to facilitate adding new entries to the prune list without\n// adding new `kubectl apply` executions, those default entries are\n// explicitly listed here.\n// In addition, as versions introduce new GVKs and retire older GVKs, we\n// have to adjust the list to ensure it is doing only those we expect it to.\nfunc getCommonAllowList(minorVersion uint) []string {\n\tallowList := []string{\n\t\t\"core/v1/ConfigMap\",\n\t\t\"core/v1/Endpoints\",\n\t\t\"core/v1/Namespace\",\n\t\t\"core/v1/PersistentVolumeClaim\",\n\t\t\"core/v1/PersistentVolume\",\n\t\t\"core/v1/Pod\",\n\t\t\"core/v1/ReplicationController\",\n\t\t\"core/v1/Secret\",\n\t\t\"core/v1/Service\",\n\t\t\"batch/v1/Job\",\n\t\t\"apps/v1/DaemonSet\",\n\t\t\"apps/v1/Deployment\",\n\t\t\"apps/v1/ReplicaSet\",\n\t\t\"apps/v1/StatefulSet\",\n\t}\n\n\t// Introductions\n\tif minorVersion >= 21 {\n\t\tallowList = append(allowList, \"batch/v1/CronJob\")\n\t}\n\tif minorVersion >= 22 {\n\t\t// This came out in 1.19, but this file's previous logic introduced\n\t\t// it in 1.22. Retaining that behavior for backward compatibility.\n\t\tallowList = append(allowList, \"networking.k8s.io/v1/Ingress\")\n\t}\n\n\t// Retirements\n\tif minorVersion < 22 {\n\t\tallowList = append(allowList, \"extensions/v1beta1/Ingress\")\n\t}\n\tif minorVersion < 25 {\n\t\tallowList = append(allowList, \"batch/v1beta1/CronJob\")\n\t}\n\n\treturn allowList\n}\n\nfunc getApiMinorVersion() uint {\n    _, serverVersion, err := lifecycle.KubernetesClientAndServerVersion()\n    if err != nil {\n\t\tpanic(err)\n\t}\n\treturn serverVersion.Minor()\n}\n\nfunc hasGroupVersion(gv string) bool {\n\tversionList, err := lifecycle.Kubectl(\"api-versions\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tre := regexp.MustCompile(`\\b` + gv + `\\b`)\n\treturn re.MatchString(versionList)\n}\n\nfunc clusterWide(manifest string, timeout string, namespace string) {\n\tcmdArgs := []string{\n\t\t\"apply\",\n\t\t\"--timeout\", timeout,\n\t\t\"--namespace\", namespace,\n\t\t\"--selector\", \"sas.com/admin=cluster-wide\",\n\t}\n\tcmdArgs = append(cmdArgs, \"-f\", manifest)\n\n\t_, err := lifecycle.Kubectl(cmdArgs...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc clusterLocal(manifest string, minorVersion uint, timeout string, namespace string, retries int, retryWait int) {\n\tallowList := getCommonAllowList(minorVersion)\n\tcmdArgs := []string{\n\t\t\"apply\",\n\t\t\"--timeout\", timeout,\n\t\t\"--namespace\", namespace,\n\t\t\"--selector\", \"sas.com/admin=cluster-local\",\n\t}\n\tcmdArgs = append(cmdArgs, \"--prune\")\n\tfor _, item := range allowList {\n\t\tcmdArgs = append(cmdArgs, \"--prune-whitelist\", item)\n\t}\n\tcmdArgs = append(cmdArgs, \"-f\", manifest)\n\n\t_, err := lifecycle.KubectlWithRetry(retries, retryWait, cmdArgs...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc clusterAdmin(manifest string, minorVersion uint, timeout string, namespace string, retries int, retryWait int) {\n\tallowList := getCommonAllowList(minorVersion)\n\tallowList = append(allowList, \"autoscaling/v2beta2/HorizontalPodAutoscaler\")\n\tcmdArgs := []string{\n\t\t\"apply\",\n\t\t\"--timeout\", timeout,\n\t\t\"--namespace\", namespace,\n\t\t\"--selector\", \"sas.com/admin=namespace\",\n\t}\n\tcmdArgs = append(cmdArgs, \"--prune\")\n\tfor _, item := range allowList {\n\t\tcmdArgs = append(cmdArgs, \"--prune-whitelist\", item)\n\t}\n\tcmdArgs = append(cmdArgs, \"-f\", manifest)\n\n\t_, err := lifecycle.KubectlWithRetry(retries, retryWait, cmdArgs...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc istio(manifest string, timeout string, namespace string, retries int, retryWait int) {\n\tif !hasGroupVersion(\"networking.istio.io/v1alpha3\") {\n\t\treturn\n\t}\n\tallowList := []string{\n\t\t\"networking.istio.io/v1alpha3/DestinationRule\",\n\t\t\"networking.istio.io/v1alpha3/VirtualService\",\n\t}\n\tcmdArgs := []string{\n\t\t\"apply\",\n\t\t\"--timeout\", timeout,\n\t\t\"--namespace\", namespace,\n\t\t\"--selector\", \"sas.com/admin=namespace\",\n\t}\n\tcmdArgs = append(cmdArgs, \"--prune\")\n\tfor _, item := range allowList {\n\t\tcmdArgs = append(cmdArgs, \"--prune-whitelist\", item)\n\t}\n\tcmdArgs = append(cmdArgs, \"-f\", manifest)\n\n\t_, err := lifecycle.KubectlWithRetry(retries, retryWait, cmdArgs...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  - |
    deploy-post=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: deploy-post
    spec:
      args:
      - name: namespace
      - name: manifest
      - name: timeout
      - name: deploymentDir
      - name: serviceAccountName
      steps:
      - args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/deploy-post=true
  - |
    deploy-post-cas=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/deploy-post: "true"
      name: deploy-post-cas
    spec:
      args:
      - name: namespace
      - name: manifest
      - name: timeout
      steps:
      - args:
        - deploy-post-cas-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        when: (eq (.GetVariable "cas.sas.com/update") "true")
  - |
    deploy-post-cas-execute=apiVersion: orchestration.sas.com/v2beta11
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: deploy-post-cas-execute
    spec:
      args:
      - name: namespace
        required: true
      - name: timeout
        required: true
      steps:
      - args:
        - rollout
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - status
        - deployment
        - sas-cas-operator
        cmd: kubectl
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - pods
        - --selector
        - app.kubernetes.io/managed-by=sas-cas-operator,sas.com/cas-auto-restart=true
        cmd: kubectl
      - args:
        - deploy-post-cas-transfer
        - --namespace
        - $namespace
        - --casname
        - $resource.Name
        cmd: run
        withClusterResources:
          currentConfiguration:
            jsonPath: '{.spec.supportStateTransfer}'
            value: '"true"'
          namespace: $namespace
          resource: CASDeployment
  - |
    deploy-post-cas-transfer=apiVersion: orchestration.sas.com/v2beta15
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: deploy-post-cas-transfer
    spec:
      args:
      - name: namespace
        required: true
      - name: casname
        required: true
      steps:
      - args:
        - Activity on CAS server
        - $casname
        - in namespace
        - $namespace
        - will be transferred to an updated server.
        cmd: log
      - args:
        - patch
        - CASDeployments
        - $casname
        - --namespace
        - $namespace
        - --type=json
        - --patch
        - '[{"op": "add", "path": "/spec/startStateTransfer", "value":true}]'
        cmd: kubectl
  - |
    deploy-post-openshift=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/deploy-post: "true"
      name: deploy-post-openshift
    spec:
      args:
      - name: namespace
        required: true
      steps:
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --ignore-not-found
        - rolebinding
        - sas-predeploy-openshift-route
        cmd: kubectl
        when: (.GetVariable "sas.com/route-permissions")
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --ignore-not-found
        - role
        - sas-predeploy-openshift-route
        cmd: kubectl
        when: (.GetVariable "sas.com/route-permissions")
  - |
    deploy-post-pyconfig=apiVersion: orchestration.sas.com/v2beta5
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-pyconfig
        sas.com/component-version: 1.8.13-20221115.1668517533830
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-pyconfig
        participate.lifecycle.sas.com/deploy-post: "true"
      name: deploy-post-pyconfig
    spec:
      args:
      - name: namespace
      - name: manifest
      steps:
      - args:
        - pyconfig-runonce-execute
        - --namespace
        - $namespace
        cmd: run
        when: (.ManifestResource $manifest (((((.NewManifestResourcesIterationSpec).WithGroup "batch").WithVersion "v1").WithKind "CronJob").WithName "sas-pyconfig"))
  - |
    deploy-pre=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: deploy-pre
    spec:
      args:
      - name: namespace
      - name: manifest
      - name: timeout
      - name: deploymentDir
      - name: serviceAccountName
      steps:
      - args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/deploy-pre=true
      - args:
        - deploy-pre-commonfiles
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run_when_exists
      - args:
        - deploy-pre-consul
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run_when_exists
      - args:
        - deploy-pre-elasticsearch
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run_when_exists
      - args:
        - deploy-pre-rabbitmq
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run_when_exists
  - |
    deploy-pre-cachelocator=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-cachelocator
        sas.com/component-version: 1.30.5-20221103.1667487469808
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/deploy-pre: "true"
      name: deploy-pre-cachelocator
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - deploy-pre-cachelocator-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        when: (eq (.GetVariable "sas.com/sas-cachelocator-update") "true")
  - |
    deploy-pre-cachelocator-execute=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-cachelocator
        sas.com/component-version: 1.30.5-20221103.1667487469808
      creationTimestamp: null
      name: deploy-pre-cachelocator-execute
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - service
        - sas-cachelocator
        cmd: kubectl
  - |
    deploy-pre-cacheserver=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-cacheserver
        sas.com/component-version: 1.30.5-20221103.1667487495149
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/deploy-pre: "true"
      name: deploy-pre-cacheserver
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - deploy-pre-cacheserver-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        when: (eq (.GetVariable "sas.com/sas-cacheserver-update") "true")
  - |
    deploy-pre-cacheserver-execute=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-cacheserver
        sas.com/component-version: 1.30.5-20221103.1667487495149
      creationTimestamp: null
      name: deploy-pre-cacheserver-execute
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - service
        - sas-cacheserver
        cmd: kubectl
  - |
    deploy-pre-commonfiles=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-commonfiles
        sas.com/component-version: 1.20.38-20221105.1667651273535
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-commonfiles
      name: deploy-pre-commonfiles
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - deploy-pre-commonfiles-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        when: |-
          (eq
            "true"
            (.Annotation "sas.com/sas-commonfiles-update" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "").WithVersion "v1").WithResource "configmap").WithName "sas-deploy-lifecycle-operation-variables")))
          )
  - |
    deploy-pre-commonfiles-execute=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-commonfiles
        sas.com/component-version: 1.20.38-20221105.1667651273535
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-commonfiles
      name: deploy-pre-commonfiles-execute
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - job
        - sas-commonfiles
        cmd: kubectl
  - |
    deploy-pre-consul=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-consul-server
        sas.com/component-version: 1.1220001.7-20221104.1667563895075
      creationTimestamp: null
      name: deploy-pre-consul
    spec:
      args:
      - name: namespace
      - name: timeout
      - name: serviceAccountName
      steps:
      - args:
        - deploy-pre-consul-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --serviceAccountName
        - $serviceAccountName
        cmd: run
        when: |-
          (eq
            "true"
            (.Annotation "sas.com/sas-consul-server-update" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "").WithVersion "v1").WithResource "configmap").WithName "sas-deploy-lifecycle-operation-variables")))
          )
  - |
    deploy-pre-consul-execute=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-consul-server
        sas.com/component-version: 1.1220001.7-20221104.1667563895075
      creationTimestamp: null
      name: deploy-pre-consul-execute
    spec:
      args:
      - name: namespace
      - name: timeout
      - name: serviceAccountName
      steps:
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - service
        - sas-consul-server-internal
        cmd: kubectl
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - role
        - sas-prepare-for-update-sas-consul-server
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - create
        - --namespace
        - $namespace
        - role
        - sas-prepare-for-update-sas-consul-server
        - --verb
        - create,update,patch,get,delete,list,watch
        - --resource
        - statefulsets/scale
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - rolebinding
        - sas-prepare-for-update-sas-consul-server
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - create
        - --namespace
        - $namespace
        - rolebinding
        - sas-prepare-for-update-sas-consul-server
        - --role
        - sas-prepare-for-update-sas-consul-server
        - --serviceaccount
        - (print $namespace ":" $serviceAccountName)
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - scale
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - statefulset
        - sas-consul-server
        - --replicas
        - "0"
        cmd: kubectl
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --ignore-not-found
        - rolebinding
        - sas-prepare-for-update-sas-consul-server
        cmd: kubectl
        when: $serviceAccountName
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --ignore-not-found
        - role
        - sas-prepare-for-update-sas-consul-server
        cmd: kubectl
        when: $serviceAccountName
  - |
    deploy-pre-dataserver=apiVersion: orchestration.sas.com/v2beta11
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-data-server-operator
        sas.com/component-version: 21.15.7-20221212.1670882997958
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/deploy-pre: "true"
      name: deploy-pre-dataserver
    spec:
      args:
      - name: namespace
        required: true
      - name: timeout
        required: true
      - name: serviceAccountName
      steps:
      - args:
        - deploy-pre-dataserver-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --serviceAccountName
        - $serviceAccountName
        cmd: run
        when: (.GetVariable "dataserver.sas.com/internal-postgres")
  - |
    deploy-pre-dataserver-execute=apiVersion: orchestration.sas.com/v3beta1
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-data-server-operator
        sas.com/component-version: 21.15.7-20221212.1670882997958
      creationTimestamp: null
      name: deploy-pre-dataserver-execute
    spec:
      args:
      - name: namespace
      - name: timeout
      - name: serviceAccountName
      source: |-
        package main
        import (
          "fmt"
          "encoding/json"
          "sas/orchestration/lifecycle"
          c "sas/orchestration/lifecycle/cluster"
        )
        func main() {
          namespace := lifecycle.Arg("namespace")
          timeout := lifecycle.Arg("timeout")
          serviceAccountName := lifecycle.Arg("serviceAccountName")
          // see ORCHESTRATE-2654 for details on why this is conditionally run
          if len(serviceAccountName) != 0 {
            setupRbac(serviceAccountName, namespace, timeout)
            defer cleanupRbac(serviceAccountName, namespace)
          }
          resources, err := c.Resources(c.Namespace(namespace), c.Group("crunchydata.com"), c.Version("v1"), c.Resource("pgclusters"))
          if err != nil {
            panic(fmt.Sprintf("Failed to get Pgclusters: %v", err))
          }
          scaleDownDataServerOperatorIfExists(namespace, timeout)
          for _, resource := range resources {
            pgclusterNameI := resource.F("metadata").F("name").Value()
            pgclusterName, ok := pgclusterNameI.(string)
            if !ok {
              panic(fmt.Sprintf("Pgcluster didn't have a name"))
            }
            failoverToOriginalPrimary(pgclusterName, namespace, timeout)
            runRmdataPgtask(pgclusterName, namespace, timeout)
            waitForRmdataPgtaskDeletion(pgclusterName, namespace, timeout)
            deleteTLSArtifacts(pgclusterName, namespace, timeout)
          }
          waitForRemainingPostgresPodDeletion(namespace, timeout)
          scaleDownCrunchyOperator(namespace, timeout)
        }
        func setupRbac(serviceAccountName, namespace, timeout string) {
          serviceAccount := fmt.Sprintf("%s:%s", namespace, serviceAccountName)
          // Clear out and re-create the role for pgclusters
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-pgclusters")
          lifecycle.Kubectl("create", "--namespace", namespace, "role", "sas-prepare-for-update-crunchy-pgclusters", "--verb", "get,create,update,patch,list", "--resource", "pgclusters.crunchydata.com")
          // Clear out and re-create the role for pgtasks
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-pgtasks")
          lifecycle.Kubectl("create", "--namespace", namespace, "role", "sas-prepare-for-update-crunchy-pgtasks", "--verb", "get,create,update,patch,list,watch", "--resource", "pgtasks.crunchydata.com")
          // Clear out and re-create the role for pods
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-pods")
          lifecycle.Kubectl("create", "--namespace", namespace, "role", "sas-prepare-for-update-crunchy-pods", "--verb", "get,list,watch", "--resource", "pods")
          // Clear out and re-create the role for deployments
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-deployments")
          lifecycle.Kubectl("create", "--namespace", namespace, "role", "sas-prepare-for-update-crunchy-deployments", "--verb", "get,patch", "--resource", "deployments.apps,deployments.apps/scale")
          // Clear out and re-create the role for jobs
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-jobs")
          lifecycle.Kubectl("create", "--namespace", namespace, "role", "sas-prepare-for-update-crunchy-jobs", "--verb", "get,delete", "--resource", "jobs.batch")
          // Clear out and re-create the role for secrets
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-secrets")
          lifecycle.Kubectl("create", "--namespace", namespace, "role", "sas-prepare-for-update-crunchy-secrets", "--verb", "get,delete", "--resource", "secrets")
          // Clear out and re-create the rolebinding for pgclusters
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-pgclusters")
          lifecycle.Kubectl("create", "--namespace", namespace, "rolebinding", "sas-prepare-for-update-crunchy-pgclusters", "--role", "sas-prepare-for-update-crunchy-pgclusters", "--serviceaccount", serviceAccount)
          // Clear out and re-create the rolebinding for pgtasks
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-pgtasks")
          lifecycle.Kubectl("create", "--namespace", namespace, "rolebinding", "sas-prepare-for-update-crunchy-pgtasks", "--role", "sas-prepare-for-update-crunchy-pgtasks", "--serviceaccount", serviceAccount)
          // Clear out and re-create the rolebinding for pods
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-pods")
          lifecycle.Kubectl("create", "--namespace", namespace, "rolebinding", "sas-prepare-for-update-crunchy-pods", "--role", "sas-prepare-for-update-crunchy-pods", "--serviceaccount", serviceAccount)
          // Clear out and re-create the rolebinding for deployments
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-deployments")
          lifecycle.Kubectl("create", "--namespace", namespace, "rolebinding", "sas-prepare-for-update-crunchy-deployments", "--role", "sas-prepare-for-update-crunchy-deployments", "--serviceaccount", serviceAccount)
          // Clear out and re-create the rolebinding for jobs
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-jobs")
          lifecycle.Kubectl("create", "--namespace", namespace, "rolebinding", "sas-prepare-for-update-crunchy-jobs", "--role", "sas-prepare-for-update-crunchy-jobs", "--serviceaccount", serviceAccount)
          // Clear out and re-create the rolebinding for secrets
          lifecycle.Kubectl("delete", "--namespace", namespace, "--wait", "--timeout", timeout, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-secrets")
          lifecycle.Kubectl("create", "--namespace", namespace, "rolebinding", "sas-prepare-for-update-crunchy-secrets", "--role", "sas-prepare-for-update-crunchy-secrets", "--serviceaccount", serviceAccount)
        }
        func cleanupRbac(serviceAccountName, namespace string) {
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-pgclusters")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-pgtasks")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-configmaps")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-pods")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-deployments")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-jobs")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "rolebinding", "sas-prepare-for-update-crunchy-secrets")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-pgclusters")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-pgtasks")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-configmaps")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-pods")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-deployments")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-jobs")
          lifecycle.Kubectl("delete", "--namespace", namespace, "--ignore-not-found", "role", "sas-prepare-for-update-crunchy-secrets")
        }
        func scaleDownDataServerOperatorIfExists(namespace, timeout string) {
          // Check if the Data Server Operator deployment exists
          resources, err := c.Resources(c.Namespace(namespace), c.Group("apps"), c.Resource("deployments"), c.Name("sas-data-server-operator"))
          if err != nil {
            panic(fmt.Sprintf("Failed to check if Data Server Operator already deployed: %v", err))
          }
          if len(resources) == 0 { // if not found, then there is nothing for us to scale
            return
          }
          // Scale down Data Server Operator so that it doesn't interfere with shutting down Pgclusters
          _, err = lifecycle.Kubectl("scale", "deployments", "--namespace", namespace, "--replicas", "0", "sas-data-server-operator", "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to scale down Data Server Operator deployment: %v", err))
          }
          // Wait for the Data Server Operator pod to be deleted
          _, err = lifecycle.Kubectl("wait", "--for", "delete", "pods", "--namespace", namespace, "--selector", "app.kubernetes.io/name=sas-data-server-operator", "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to wait for deletion of Data Server Operator pod: %v", err))
          }
        }
        func failoverToOriginalPrimary(pgclusterName, namespace, timeout string) {
          selector := fmt.Sprintf("crunchy-pgha-scope=%s,name!=%s", pgclusterName, pgclusterName)
          // Scale down postgres replica deployments to re-elect original primary
          _, err := lifecycle.Kubectl("scale", "deployments", "--namespace", namespace, "--replicas", "0", "--selector", selector, "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to scale down Postgres replica deployments: %v", err))
          }
          // Wait for replica pods to be deleted
          _, err = lifecycle.Kubectl("wait", "--for", "delete", "pods", "--namespace", namespace, "--selector", selector, "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to wait for deletion of Postgres replica pods: %v", err))
          }
          // Get the replica deploy names which are the same as the pvc names
          resources, err := c.Resources(c.Namespace(namespace), c.Resource("deployments"), c.LabelSelector(selector))
          if err != nil {
            panic(fmt.Sprintf("Failed to get replica deployment resources: %v", err))
          }
          for _, resource := range resources {
            deployNameI := resource.F("metadata").F("name").Value()
            deployName, ok := deployNameI.(string)
            if !ok {
              panic("Crunchy Postgres replica deployment didn't have a name")
            }
            // Delete replica PVC
            _, err = lifecycle.Kubectl("delete", "pvc", "--namespace", namespace, deployName, "--ignore-not-found", "true", "--timeout", timeout)
            if err != nil {
              panic(fmt.Sprintf("Failed to delete unused Crunchy Postgres replica PVC: %v", err))
            }
          }
          // Delete the pgo-client job if exists. This job is for all pg clusters.
          _, err = lifecycle.Kubectl("delete", "job", "--namespace", namespace, "sas-crunchy-data-pgo-client", "--ignore-not-found", "true", "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to delete sas-crunchy-data-pgo-client job: %v", err))
          }
        }
        func runRmdataPgtask(pgclusterName, namespace, timeout string) {
          // Run rmdata pgtask to delete the Crunchy pgcluster. Have to use this approach
          // instead of deleting the pgcluster directly since Crunchy 4.5, used in LTS 2020.1,
          // does not support deletion of the pgcluster CR directly
          pgtask := map[string]interface{}{
            "apiVersion": "crunchydata.com/v1",
            "kind":       "Pgtask",
            "metadata": map[string]interface{}{
              "labels": map[string]interface{}{
                "pg-cluster": pgclusterName,
                "pgrmdata":   "true",
              },
              "name": fmt.Sprintf("%s-rmdata", pgclusterName),
            },
            "spec": map[string]interface{}{
              "name": fmt.Sprintf("%s-rmdata", pgclusterName),
              "parameters": map[string]interface{}{
                "crunchy-pgha-scope": pgclusterName,
                "delete-backups":     "false",
                "delete-data":        "false",
                "is-backup":          "false",
                "is-replica":         "false",
                "pg-cluster":         pgclusterName,
                "replica-name":       "",
              },
              "status": "",
              "storagespec": map[string]interface{}{
                "accessmode":         "",
                "matchLabels":        "",
                "name":               "",
                "size":               "",
                "storageclass":       "",
                "storagetype":        "",
                "supplementalgroups": "",
              },
              "tasktype": "delete-data",
            },
          }
          pgtaskJson, err := json.Marshal(pgtask)
          if err != nil {
            panic(fmt.Sprintf("Failed to marshal Pgtask: %v", err))
          }
          _, err = lifecycle.KubectlWithStdin(string(pgtaskJson), "apply", "-f", "-", "--namespace", namespace, "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to run Pgtask to delete Pgcluster: %v", err))
          }
        }
        func deleteTLSArtifacts(pgclusterName, namespace, timeout string) {
          // Delete the TLS artifacts. This will cause new TLS certs to be created,
          // which is necessary for upgrades supporting cert-manager 1.7.
          // See DEPENBDAT-1963
          jobName := fmt.Sprintf("%s-tls-generator", pgclusterName)
          _, err := lifecycle.Kubectl("delete", "--namespace", namespace, "job", jobName, "--ignore-not-found", "true", "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to delete TLS generator job: %v", err))
          }
          secretName := fmt.Sprintf("%s-tls-secret", pgclusterName)
          _, err = lifecycle.Kubectl("delete", "--namespace", namespace, "secret", secretName, "--ignore-not-found", "true", "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to delete TLS secret: %v", err))
          }
        }
        func waitForRmdataPgtaskDeletion(pgclusterName, namespace, timeout string) {
          // Wait for the postgres operator to remove the pgtask resources
          selector := fmt.Sprintf("pgrmdata,pg-cluster=%s", pgclusterName)
          _, err := lifecycle.Kubectl("wait", "--for", "delete", "pgtasks", "--namespace", namespace, "--selector", selector, "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to wait for deletion of Pgtask: %v", err))
          }
        }
        func waitForRemainingPostgresPodDeletion(namespace, timeout string) {
          // Wait for the rest of the crunchy pods to be deleted
          _, err := lifecycle.Kubectl("wait", "--for", "delete", "pods", "--namespace", namespace, "--selector", "crunchy-pgha-scope", "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to wait for deletion of remaining Postgres pods: %v", err))
          }
        }
        func scaleDownCrunchyOperator(namespace, timeout string) {
          // Scale down Crunchy Operator so that, after update is applied, the new
          // Data Server Operator isn't inadvertently communicating with the old
          // Crunchy Operator pod
          _, err := lifecycle.Kubectl("scale", "deployments", "--namespace", namespace, "--replicas", "0", "sas-crunchy-data-postgres-operator", "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to scale down Crunchy Operator deployment: %v", err))
          }
          // Wait for the Crunchy Operator pod to be deleted
          _, err = lifecycle.Kubectl("wait", "--for", "delete", "pods", "--namespace", namespace, "--selector", "app.kubernetes.io/name=sas-crunchy-data-postgres-operator", "--timeout", timeout)
          if err != nil {
            panic(fmt.Sprintf("Failed to wait for deletion of Crunchy Operator pod: %v", err))
          }
        }
  - |
    deploy-pre-elasticsearch=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-opendistro-operator
        sas.com/component-version: 7.17.2-20221104.1667572603049
      creationTimestamp: null
      name: deploy-pre-elasticsearch
    spec:
      args:
      - name: namespace
      - name: timeout
      - name: serviceAccountName
      steps:
      - args:
        - deploy-pre-elasticsearch-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --serviceAccountName
        - $serviceAccountName
        cmd: run
        when: |-
          (eq
            "true"
            (.Annotation "sas.com/sas-opendistro-operator-update" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "").WithVersion "v1").WithResource "configmap").WithName "sas-deploy-lifecycle-operation-variables")))
          )
  - |
    deploy-pre-elasticsearch-execute=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-opendistro-operator
        sas.com/component-version: 7.17.2-20221104.1667572603049
      creationTimestamp: null
      name: deploy-pre-elasticsearch-execute
    spec:
      args:
      - name: namespace
      - name: timeout
      - name: serviceAccountName
      steps:
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - role
        - sas-prepare-for-update-elasticsearch-pods
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - create
        - --namespace
        - $namespace
        - role
        - sas-prepare-for-update-elasticsearch-pods
        - --verb
        - get,list,watch
        - --resource
        - pods
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - role
        - sas-prepare-for-update-elasticsearch-deployments
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - create
        - --namespace
        - $namespace
        - role
        - sas-prepare-for-update-elasticsearch-deployments
        - --verb
        - get,patch
        - --resource
        - deployments.apps,deployments.apps/scale
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - rolebinding
        - sas-prepare-for-update-elasticsearch-pods
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - create
        - --namespace
        - $namespace
        - rolebinding
        - sas-prepare-for-update-elasticsearch-pods
        - --role
        - sas-prepare-for-update-elasticsearch-pods
        - --serviceaccount
        - (print $namespace ":" $serviceAccountName)
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - rolebinding
        - sas-prepare-for-update-elasticsearch-deployments
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - create
        - --namespace
        - $namespace
        - rolebinding
        - sas-prepare-for-update-elasticsearch-deployments
        - --role
        - sas-prepare-for-update-elasticsearch-deployments
        - --serviceaccount
        - (print $namespace ":" $serviceAccountName)
        cmd: kubectl
        when: $serviceAccountName
      - args:
        - scale
        - --namespace
        - $namespace
        - deployments
        - --replicas
        - "0"
        - sas-opendistro-operator
        cmd: kubectl
      - args:
        - wait
        - --namespace
        - $namespace
        - --for
        - delete
        - pod
        - --selector
        - app=sas-opendistro-operator
        - --timeout
        - $timeout
        cmd: kubectl
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --ignore-not-found
        - rolebinding
        - sas-prepare-for-update-elasticsearch-pods
        cmd: kubectl
        when: $serviceAccountName
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --ignore-not-found
        - rolebinding
        - sas-prepare-for-update-elasticsearch-deployments
        cmd: kubectl
        when: $serviceAccountName
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --ignore-not-found
        - role
        - sas-prepare-for-update-elasticsearch-pods
        cmd: kubectl
        when: $serviceAccountName
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --ignore-not-found
        - role
        - sas-prepare-for-update-elasticsearch-deployments
        cmd: kubectl
        when: $serviceAccountName
  - |
    deploy-pre-openshift=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/deploy-pre: "true"
      name: deploy-pre-openshift
    spec:
      args:
      - name: namespace
        required: true
      - name: manifest
        required: true
      - name: timeout
        required: true
      - name: serviceAccountName
      steps:
      - args:
        - sas.com/route-permissions
        - "true"
        cmd: set_variable
        when: |-
          (and
            $serviceAccountName
            (.ManifestResources $manifest ((((.NewManifestResourcesIterationSpec).WithGroup "route.openshift.io").WithVersion "v1").WithKind "Route")))
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - role
        - sas-predeploy-openshift-route
        cmd: kubectl
        when: (.GetVariable "sas.com/route-permissions")
      - args:
        - create
        - --namespace
        - $namespace
        - role
        - sas-predeploy-openshift-route
        - --verb
        - get,create,update,patch
        - --resource
        - route.route.openshift.io/custom-host
        cmd: kubectl
        when: (.GetVariable "sas.com/route-permissions")
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - rolebinding
        - sas-predeploy-openshift-route
        cmd: kubectl
        when: (.GetVariable "sas.com/route-permissions")
      - args:
        - create
        - --namespace
        - $namespace
        - rolebinding
        - sas-predeploy-openshift-route
        - --role
        - sas-predeploy-openshift-route
        - --serviceaccount
        - (print $namespace ":" $serviceAccountName)
        cmd: kubectl
        when: (.GetVariable "sas.com/route-permissions")
  - |
    deploy-pre-pyconfig=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-pyconfig
        sas.com/component-version: 1.8.13-20221115.1668517533830
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-pyconfig
        participate.lifecycle.sas.com/deploy-pre: "true"
      name: deploy-pre-pyconfig
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - deploy-pre-pyconfig-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        when: |-
          (eq
            "true"
            (.Annotation "sas.com/sas-pyconfig-update" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "").WithVersion "v1").WithResource "configmap").WithName "sas-deploy-lifecycle-operation-variables")))
          )
  - |
    deploy-pre-pyconfig-execute=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-pyconfig
        sas.com/component-version: 1.8.13-20221115.1668517533830
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-pyconfig
      name: deploy-pre-pyconfig-execute
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - job
        - sas-pyconfig-cjinitial
        cmd: kubectl
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - job
        - sas-pyconfig
        cmd: kubectl
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - job
        - sas-pyconfig-job
        cmd: kubectl
  - |
    deploy-pre-rabbitmq=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-rabbitmq-server
        sas.com/component-version: 3.821003.16-20221103.1667496983589
      creationTimestamp: null
      name: deploy-pre-rabbitmq
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - deploy-pre-rabbitmq-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        when: |-
          (eq
            "true"
            (.Annotation "sas.com/sas-rabbitmq-server-update" (.ClusterResource ((((((.NewClusterResourcesIterationSpec).WithNamespace $namespace).WithGroup "").WithVersion "v1").WithResource "configmap").WithName "sas-deploy-lifecycle-operation-variables")))
          )
  - |
    deploy-pre-rabbitmq-execute=apiVersion: orchestration.sas.com/v2beta4
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-rabbitmq-server
        sas.com/component-version: 3.821003.16-20221103.1667496983589
      creationTimestamp: null
      name: deploy-pre-rabbitmq-execute
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - service
        - sas-rabbitmq-server
        cmd: kubectl
  - |
    deploy-stage=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: deploy-stage
    spec:
      args:
      - name: namespace
      - name: manifest
      - name: timeout
      - name: deploymentDir
      - name: serviceAccountName
      steps:
      - args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/deploy-stage=true
  - |
    kubernetes-kubectl-server-version-alignment-check=apiVersion: orchestration.sas.com/v2beta15
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-orchestration
        sas.com/component-version: 1.80.3-20221102.1667411355996
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/assess: "true"
      name: kubernetes-kubectl-server-version-alignment-check
    spec:
      steps:
      - args:
        - kubectl and server version combination exceed the supported skew window
        cmd: fail
        when: (not (.KubernetesClientServerVersionsAreValid))
  - |
    prepull-during-update=apiVersion: orchestration.sas.com/v3beta1
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-prepull
        sas.com/component-version: 2.1.13-20221102.1667408777747
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-prepull
        participate.lifecycle.sas.com/deploy-stage: "true"
      name: prepull-during-update
    spec:
      args:
      - name: namespace
        required: true
      - name: manifest
        required: true
      - default: 1800s
        name: timeout
      source: "package main\nimport (\n  \"encoding/json\"\n  \"regexp\"\n  \"fmt\"\n  \"time\"\n  \"sas/orchestration/lifecycle\"\n  m \"sas/orchestration/lifecycle/manifest\"\n  c \"sas/orchestration/lifecycle/cluster\"\n)\nfunc main() {\n  manifest := lifecycle.Arg(\"manifest\")\n  namespace := lifecycle.Arg(\"namespace\")\n  timeout := lifecycle.Arg(\"timeout\")\n  if prepullPresent(manifest) == false {\n    // handle orders without prepull\n    return\n  }\n  deleteExistingPrepull(namespace, timeout)\n  deployPrepullcm(manifest, namespace, timeout)\n  deployInputcm(manifest, namespace, timeout)\n  deployGocm(manifest, namespace, timeout)\n  deploySCcm(manifest, namespace, timeout)\n  deployPCcm(manifest, namespace, timeout)\n  deployPrepullpt(manifest, namespace, timeout)\n  deployCSpt(manifest, namespace, timeout)\n  deployPrepullrl(manifest, namespace, timeout)\n  deployPrepullsa(manifest, namespace, timeout)\n  deployPrepullrb(manifest, namespace, timeout)\n  deployImagesecs(manifest, namespace, timeout)\n  deployConfigMap(manifest, namespace, timeout)\n  waitForConfigMapCreate(namespace, timeout)\n  deployPrepull(manifest, namespace, timeout)\n  waitForConfigMapDelete(namespace, timeout)\n}\nfunc deleteExistingPrepull(namespace, timeout string) {\n  matches, err := c.Resources(c.Namespace(namespace), c.Resource(\"Deployment\"), c.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(matches) > 0 {\n    _, err = lifecycle.Kubectl(\"delete\", \"deployment,pods\", \"--selector\", \"app.kubernetes.io/name=sas-prepull\", \"--namespace\", namespace, \"--timeout\", timeout, \"--wait\")\n    if err != nil {\n      panic(err)\n    }\n  }\n  return\n}\nfunc deployConfigMap(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.LabelSelector(\"orchestration.sas.com/lifecycle=components\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Needed configmap not found\")\n  }\n  componentsConfigMap := resources[0]\n  renameResource(componentsConfigMap, \"sas-prepull-components\")\n  componentsConfigMapJson, err := json.Marshal(componentsConfigMap.Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(componentsConfigMapJson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployInputcm(manifest, namespace, timeout string) {\n  inputCm := \"\"\n  sName := \"\"\n  inputRegEx, _ := regexp.Compile(\"^input-[a-zA-Z0-9]{10}$\")\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"))\n  if err != nil {\n    panic(err)\n  }\n  for _, resource := range resources {\n    rName := resource.F(\"metadata\").F(\"name\").Value()\n    sName, _ = rName.(string)\n    if inputRegEx.MatchString(sName) {\n      inputCm = sName\n      break \n    }\n  }\n  inCm, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.Name(inputCm))\n  if err != nil {\n    panic(err)\n  }\n  if len(inCm) != 1 {\n    panic(\"Unable to get input config map\")\n  }\n  injson, err := json.Marshal(inCm[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(injson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }  \n}\nfunc deploySCcm(manifest, namespace, timeout string) {\n  inputCm := \"\"\n  sName := \"\"\n  inputRegEx, _ := regexp.Compile(\"^sas-shared-config-[a-zA-Z0-9]{10}$\")\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"))\n  if err != nil {\n    panic(err)\n  }\n  for _, resource := range resources {\n    rName := resource.F(\"metadata\").F(\"name\").Value()\n    sName, _ = rName.(string)\n    if inputRegEx.MatchString(sName) {\n      inputCm = sName\n      break \n    }\n  }\n  inCm, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.Name(inputCm))\n  if err != nil {\n    panic(err)\n  }\n  if len(inCm) != 1 {\n    panic(\"Unable to get input config map\")\n  }\n  injson, err := json.Marshal(inCm[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(injson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }  \n}\nfunc deployGocm(manifest, namespace, timeout string) {\n  inputCm := \"\"\n  sName := \"\"\n  inputRegEx, _ := regexp.Compile(\"^sas-go-config-[a-zA-Z0-9]{10}$\")\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"))\n  if err != nil {\n    panic(err)\n  }\n  for _, resource := range resources {\n    rName := resource.F(\"metadata\").F(\"name\").Value()\n    sName, _ = rName.(string)\n    if inputRegEx.MatchString(sName) {\n      inputCm = sName\n      break \n    }\n  }\n  inCm, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.Name(inputCm))\n  if err != nil {\n    panic(err)\n  }\n  if len(inCm) != 1 {\n    panic(\"Unable to get input config map\")\n  }\n  injson, err := json.Marshal(inCm[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(injson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }  \n}\nfunc deployPCcm(manifest, namespace, timeout string) {\n  inputCm := \"\"\n  sName := \"\"\n  inputRegEx, _ := regexp.Compile(\"^sas-postgres-config-[a-zA-Z0-9]{10}$\")\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"))\n  if err != nil {\n    panic(err)\n  }\n  for _, resource := range resources {\n    rName := resource.F(\"metadata\").F(\"name\").Value()\n    sName, _ = rName.(string)\n    if inputRegEx.MatchString(sName) {\n      inputCm = sName\n      break \n    }\n  }\n  inCm, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.Name(inputCm))\n  if err != nil {\n    panic(err)\n  }\n  if len(inCm) != 1 {\n    panic(\"Unable to get input config map\")\n  }\n  injson, err := json.Marshal(inCm[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(injson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }  \n}\nfunc deployCSpt(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"PodTemplate\"), m.Name(\"sas-compute-job-config\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Compute job config podtemplate not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullpt(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"PodTemplate\"), m.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull podtemplate not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullrb(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"RoleBinding\"), m.Name(\"sas-prepull-v2-namespace\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull role binding not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullrl(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"Role\"), m.Name(\"sas-prepull-v2-namespace\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull role not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullsa(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"ServiceAccount\"), m.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull service account config not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullcm(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.LabelSelector(\"app.kubernetes.io/name=sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull parameters config map not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployImagesecs(manifest, namespace, timeout string) {\n  imageSec := \"\"\n  sName := \"\"\n  inputRegEx, _ := regexp.Compile(\"^sas-image-pull-secrets-[a-zA-Z0-9]{10}$\")\n  resources, err := m.Resources(manifest, m.Kind(\"Secret\"))\n  if err != nil {\n    panic(err)\n  }\n  for _, resource := range resources {\n    rName := resource.F(\"metadata\").F(\"name\").Value()\n    sName, _ = rName.(string)\n    if inputRegEx.MatchString(sName) {\n      imageSec = sName\n      break\n    }\n  }\n  inSe, err := m.Resources(manifest, m.Kind(\"Secret\"), m.Name(imageSec))\n  if err != nil {\n    panic(err)\n  }\n  if len(inSe) != 1 {\n    panic(\"Unable to get input config map\")\n  }\n  injson, err := json.Marshal(inSe[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(injson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepull(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"Deployment\"), m.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Unable to find sas-prepull deployment\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc waitForConfigMapCreate(namespace, timeout string) {\n  tooLong, err := time.ParseDuration(timeout)\n  if err != nil {\n    panic(err)\n  }\n  stopAt := time.Now().Add(tooLong)\n  sleepDuration := 100 * time.Millisecond\n  for {\n    matches, err := c.Resources(c.Namespace(namespace), c.Resource(\"ConfigMap\"), c.Name(\"sas-prepull-components\"))\n    if err != nil {\n      panic(err)\n    }\n    if len(matches) == 1 {\n      return\n    }\n    if time.Now().After(stopAt) {\n      panic(\"Timed out waiting for creation of sas-prepull-components\")\n    }\n    time.Sleep(sleepDuration)\n  }\n}\nfunc waitForConfigMapDelete(namespace, timeout string) {\n  tooLong, err := time.ParseDuration(timeout)\n  if err != nil {\n    panic(err)\n  }\n  stopAt := time.Now().Add(tooLong)\n  sleepDuration := 100 * time.Millisecond\n  for {\n    matches, err := c.Resources(c.Namespace(namespace), c.Resource(\"ConfigMap\"), c.Name(\"sas-prepull-components\"))\n    if err != nil {\n      panic(err)\n    }\n    if len(matches) == 0 {\n      return\n    }\n    if time.Now().After(stopAt) {\n      panic(\"Timed out waiting for deletion of sas-prepull-components\")\n    }\n    time.Sleep(sleepDuration)\n  }\n}\nfunc renameResource(resource *lifecycle.Resource, name string) {\n  resourceAsMap, ok := resource.Value().(map[string]interface{})\n  if !ok {\n    panic(\"not the right type\")\n  }\n  resourceMetadataAsMap, ok := resourceAsMap[\"metadata\"].(map[string]interface{})\n  if !ok {\n    panic(\"not the right type\")\n  }\n  resourceMetadataAsMap[\"name\"] = name\n}\nfunc prepullPresent(manifest string) bool {\n  resources, err := m.Resources(manifest, m.Kind(\"Deployment\"), m.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  return len(resources) > 0\n}"
  - |
    pyconfig-runonce-execute=apiVersion: orchestration.sas.com/v3beta3
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-pyconfig
        sas.com/component-version: 1.8.13-20221115.1668517533830
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sas-pyconfig
      name: pyconfig-runonce-execute
    spec:
      args:
      - name: namespace
        require: true
      - default: 1800s
        name: timeout
      source: |-
        package main
        import (
          "fmt"
          //"time"
          //"strconv"
          "sas/orchestration/lifecycle"
        )
        func main() {
          namespace := lifecycle.Arg("namespace")
          timeout := lifecycle.Arg("timeout")
          //now := time.Now()
          //epochT := now.Unix()
          //epochStamp := strconv.FormatInt(epochT, 10)
          jobName := "sas-pyconfig-cjinitial"
          _, createErr := lifecycle.KubectlWithRetry(3, 3, "create", "job", "--namespace",
                            namespace, "--from", "cronjob/sas-pyconfig", jobName)
          if createErr != nil {
                  lifecycle.Log(fmt.Sprintf("Failed to create job: %s Error: %v", jobName, createErr))
          }
        }
  - |
    reconcile-once.deploy=apiVersion: orchestration.sas.com/v2beta3
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-orchestration
        sas.com/component-version: 1.80.3-20221102.1667411355996
      creationTimestamp: null
      name: reconcile-once.deploy
    spec:
      args:
      - name: clusterApiManifest
      - name: clusterApiNamespace
      - name: deploymentDir
      - name: manifest
      - name: namespace
      - name: permissionsManifest
      - name: serviceAccountName
      - default: 7200s
        name: timeout
      steps:
      - args:
        - apply
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - -f
        - $permissionsManifest
        cmd: kubectl
        when: $permissionsManifest
      - args:
        - patch
        - --namespace
        - $namespace
        - secrets
        - $resource.Name
        - --type
        - json
        - --patch
        - '[{"op":"replace","path":"/metadata/ownerReferences","value":[]}]'
        cmd: kubectl
        withClusterResources:
          name: sas-crunchy-data-postgres-tls-secret
          namespace: $namespace
          resource: secrets
          version: v1
      - args:
        - deploy
        - --namespace
        - $namespace
        - --manifest
        - $manifest
        - --deploymentDir
        - $deploymentDir
        - --serviceAccountName
        - $serviceAccountName
        - --timeout
        - $timeout
        - --clusterApiNamespace
        - $clusterApiNamespace
        - --clusterApiManifest
        - $clusterApiManifest
        cmd: run
      - always: true
        args:
        - delete
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        - -f
        - $permissionsManifest
        cmd: kubectl
        when: $permissionsManifest
  - |
    scale-to-zero=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: scale-to-zero
    spec:
      args:
      - name: namespace
      - default: 7200s
        name: timeout
      steps:
      - args:
        - 'DEPRECATED: Replaced by stop-all'
        cmd: log
      - args:
        - stop-all
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
  - |
    scale-up=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: scale-up
    spec:
      args:
      - name: namespace
      - default: 7200s
        name: timeout
      steps:
      - args:
        - 'DEPRECATED: Replaced by start-all'
        cmd: log
      - args:
        - start-all
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
  - |
    start-all=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        lifecycle.orchestration.sas.com/publish: "true"
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: start-all
    spec:
      args:
      - name: namespace
      - default: 7200s
        name: timeout
      steps:
      - always: true
        args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/start-all-assess=true
      - always: true
        args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/start-all-pre=true
      - args:
        - start-all-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
      - always: true
        args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/start-all-post=true
  - |
    start-all-execute=apiVersion: orchestration.sas.com/v2beta7
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: start-all-execute
    spec:
      args:
      - name: namespace
      - name: timeout
      steps:
      - args:
        - start-all-scale
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
      - args:
        - patch
        - --namespace
        - $namespace
        - cronjobs
        - $resource.Name
        - --patch
        - (print "{\"spec\":{\"suspend\":" (.LastAppliedConfigurationValue $resource "{.spec.suspend}" "false") "}}")
        cmd: kubectl
        withClusterResources:
          group: batch
          labelSelector: sas.com/deployment=sas-viya,sas.com/zero-scale-phase!=never
          namespace: $namespace
          resource: cronjobs
      - args:
        - patch
        - --namespace
        - $namespace
        - casdeployments
        - $resource.Name
        - --type
        - json
        - --patch
        - '(print "[{\"op\":\"replace\", \"path\": \"/spec/shutdown\", \"value\":" (.LastAppliedConfigurationValue $resource "{.spec.shutdown}" "false") "}]" )'
        cmd: kubectl
        when: (.ClusterDefinitions (((.NewClusterDefinitionsIterationSpec).WithGroup "viya.sas.com").WithResource "casdeployments"))
        withClusterResources:
          group: viya.sas.com
          labelSelector: sas.com/deployment=sas-viya,sas.com/zero-scale-phase!=never
          namespace: $namespace
          resource: casdeployments
      - args:
        - patch
        - --namespace
        - $namespace
        - opendistroclusters
        - $resource.Name
        - --type
        - json
        - --patch
        - '(print "[{\"op\":\"replace\", \"path\": \"/spec/shutdown\", \"value\":" (.LastAppliedConfigurationValue $resource "{.spec.shutdown}" "false") "}]" )'
        cmd: kubectl
        when: (.ClusterDefinitions (((.NewClusterDefinitionsIterationSpec).WithGroup "opendistro.sas.com").WithResource "opendistroclusters"))
        withClusterResources:
          group: opendistro.sas.com
          labelSelector: sas.com/deployment=sas-viya,sas.com/zero-scale-phase!=never
          namespace: $namespace
          resource: opendistroclusters
      - args:
        - patch
        - --namespace
        - $namespace
        - daemonsets
        - $resource.Name
        - --patch
        - (print "{\"spec\":{\"template\":{\"spec\":{\"nodeSelector\":{\"sas.com/scale-class\":\"" (.LastAppliedConfigurationValue $resource "{.spec.template.spec.nodeSelector.sas\\.com/scale-class}" "ignored") "\"}}}}}" )
        cmd: kubectl
        withClusterResources:
          group: apps
          labelSelector: sas.com/deployment=sas-viya,sas.com/zero-scale-phase!=never
          lastAppliedConfiguration:
            jsonPath: '{.spec.template.spec.nodeSelector.sas\\.com/scale-class}'
          namespace: $namespace
          resource: daemonsets
      - args:
        - patch
        - --namespace
        - $namespace
        - daemonsets
        - $resource.Name
        - --type
        - json
        - --patch
        - '[{"op":"remove", "path": "/spec/template/spec/nodeSelector/sas.com~1scale-class"}]'
        cmd: kubectl
        withClusterResources:
          currentConfiguration:
            isMissing: false
            jsonPath: '{.spec.template.spec.nodeSelector.sas\\.com/scale-class}'
          group: apps
          labelSelector: sas.com/deployment=sas-viya,sas.com/zero-scale-phase!=never
          lastAppliedConfiguration:
            isMissing: true
            jsonPath: '{.spec.template.spec.nodeSelector.sas\\.com/scale-class}'
          namespace: $namespace
          resource: daemonsets
      - args:
        - wait
        - --namespace
        - $namespace
        - --for
        - condition=ready
        - pod
        - --selector
        - app.kubernetes.io/name=sas-data-server-operator
        - --timeout
        - $timeout
        cmd: kubectl
      - args:
        - wait
        - --namespace
        - $namespace
        - --for
        - condition=ready
        - pod
        - --selector
        - app.kubernetes.io/name=sas-crunchy-data-postgres-operator
        - --timeout
        - $timeout
        cmd: kubectl
      - args:
        - patch
        - --namespace
        - $namespace
        - pgclusters.webinfdsvr.sas.com
        - $resource.Name
        - --type
        - json
        - --patch
        - '(print "[{\"op\":\"replace\", \"path\": \"/spec/shutdown\", \"value\":" (.LastAppliedConfigurationValue $resource "{.spec.shutdown}" "false") "}]" )'
        cmd: kubectl
        when: (.ClusterDefinitions (((.NewClusterDefinitionsIterationSpec).WithGroup "webinfdsvr.sas.com").WithResource "pgclusters"))
        withClusterResources:
          group: webinfdsvr.sas.com
          labelSelector: sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
          namespace: $namespace
          resource: pgclusters
      - args:
        - patch
        - --namespace
        - $namespace
        - distributedredisclusters.redis.kun
        - $resource.Name
        - --type
        - json
        - --patch
        - '(print "[{\"op\":\"replace\", \"path\": \"/spec/shutdown\", \"value\":" (.LastAppliedConfigurationValue $resource "{.spec.shutdown}" "false") "}]" )'
        cmd: kubectl
        when: (.ClusterDefinitions (((.NewClusterDefinitionsIterationSpec).WithGroup "redis.kun").WithResource "distributedredisclusters"))
        withClusterResources:
          group: redis.kun
          labelSelector: sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
          namespace: $namespace
          resource: distributedredisclusters
  - |
    start-all-scale=apiVersion: orchestration.sas.com/v3beta2
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: start-all-scale
    spec:
      args:
      - name: namespace
      - name: timeout
      source: |-
        package main
        import (
          "fmt"
          "sas/orchestration/lifecycle"
          c "sas/orchestration/lifecycle/cluster"
        )
        func main() {
          namespace := lifecycle.Arg("namespace")
          scale(namespace)
        }
        func scale(namespace string){
          scaleReplicaMap := make(map[string][]string)
          scaleCommand := []string{"scale", "--namespace", namespace, "--replicas"}
  
          deployments, err := c.MetadataResources(c.Namespace(namespace), c.Resource("Deployment"), c.LabelSelector("sas.com/deployment=sas-viya,sas.com/zero-scale-phase!=never"))
          if err != nil {
            panic(err)
          }
          statefulsets, err := c.MetadataResources(c.Namespace(namespace), c.Resource("StatefulSets"), c.LabelSelector("sas.com/deployment=sas-viya,sas.com/zero-scale-phase!=never"))
          if err != nil {
            panic(err)
          }
          metaresources := append(deployments, statefulsets...)
  
          for _, metaresource := range metaresources {
            replicas := lifecycle.LastAppliedConfigurationValue(metaresource,"{.spec.replicas}","1")
            name := metaresource.Name
            kind := metaresource.Kind
            resource := fmt.Sprintf("%s/%s", kind, name)
            scaleReplicaMap[replicas] = append(scaleReplicaMap[replicas], resource)
          }
  
          for replicaKey, scaleList := range scaleReplicaMap {
              command := append(scaleCommand, replicaKey)
              command = append(command, scaleList...)
              _, err = lifecycle.Kubectl(command...)
          }
        }
  - |
    stop-all=apiVersion: orchestration.sas.com/v2beta10
    kind: LifecycleOperation
    metadata:
      annotations:
        lifecycle.orchestration.sas.com/publish: "true"
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: stop-all
    spec:
      args:
      - name: namespace
      - default: 7200s
        name: timeout
      steps:
      - always: true
        args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/stop-all-assess=true
      - always: true
        args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/stop-all-pre=true
      - args:
        - stop-all-execute
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
      - always: true
        args:
        - $operation
        - --namespace
        - $namespace
        - --timeout
        - $timeout
        cmd: run
        withOperations:
          labelSelector: participate.lifecycle.sas.com/stop-all-post=true
  - |
    stop-all-execute=apiVersion: orchestration.sas.com/v2beta7
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: stop-all-execute
    spec:
      args:
      - name: namespace
      - default: 7200s
        name: timeout
      steps:
      - args:
        - scale
        - --namespace
        - $namespace
        - deployments
        - --replicas
        - "0"
        - --selector
        - sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
        cmd: kubectl
      - args:
        - scale
        - --namespace
        - $namespace
        - statefulsets
        - --replicas
        - "0"
        - --selector
        - sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
        cmd: kubectl
      - args:
        - patch
        - --namespace
        - $namespace
        - cronjobs
        - $resource.Name
        - --patch
        - '{"spec":{"suspend":true}}'
        cmd: kubectl
        withClusterResources:
          group: batch
          labelSelector: sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
          namespace: $namespace
          resource: cronjobs
      - args:
        - patch
        - --namespace
        - $namespace
        - cronjobs
        - $resource.Name
        - --patch
        - '{"spec":{"suspend":true}}'
        cmd: kubectl
        withClusterResources:
          group: batch
          labelSelector: sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
          namespace: $namespace
          resource: cronjobs
      - args:
        - patch
        - --namespace
        - $namespace
        - casdeployments
        - $resource.Name
        - --type
        - json
        - --patch
        - '[{"op":"replace", "path": "/spec/shutdown", "value":true}]'
        cmd: kubectl
        when: (.ClusterDefinitions (((.NewClusterDefinitionsIterationSpec).WithGroup "viya.sas.com").WithResource "casdeployments"))
        withClusterResources:
          group: viya.sas.com
          labelSelector: sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
          namespace: $namespace
          resource: casdeployments
      - args:
        - patch
        - --namespace
        - $namespace
        - opendistroclusters
        - $resource.Name
        - --type
        - json
        - --patch
        - '[{"op":"replace", "path": "/spec/shutdown", "value":true}]'
        cmd: kubectl
        when: (.ClusterDefinitions (((.NewClusterDefinitionsIterationSpec).WithGroup "opendistro.sas.com").WithResource "opendistroclusters"))
        withClusterResources:
          group: opendistro.sas.com
          labelSelector: sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
          namespace: $namespace
          resource: opendistroclusters
      - args:
        - patch
        - --namespace
        - $namespace
        - daemonsets
        - $resource.Name
        - --patch
        - '{"spec":{"template":{"spec":{"nodeSelector":{"sas.com/scale-class":"zero"}}}}}'
        cmd: kubectl
        withClusterResources:
          group: apps
          labelSelector: sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
          namespace: $namespace
          resource: daemonsets
      - args:
        - patch
        - --namespace
        - $namespace
        - pgclusters.webinfdsvr.sas.com
        - $resource.Name
        - --type
        - json
        - --patch
        - '[{"op":"replace", "path": "/spec/shutdown", "value":true}]'
        cmd: kubectl
        when: (.ClusterDefinitions (((.NewClusterDefinitionsIterationSpec).WithGroup "webinfdsvr.sas.com").WithResource "pgclusters"))
        withClusterResources:
          group: webinfdsvr.sas.com
          labelSelector: sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
          namespace: $namespace
          resource: pgclusters
      - args:
        - patch
        - --namespace
        - $namespace
        - distributedredisclusters
        - $resource.Name
        - --type
        - json
        - --patch
        - '[{"op":"replace", "path": "/spec/shutdown", "value":true}]'
        cmd: kubectl
        when: (.ClusterDefinitions (((.NewClusterDefinitionsIterationSpec).WithGroup "redis.kun").WithResource "distributedredisclusters"))
        withClusterResources:
          group: redis.kun
          labelSelector: sas.com/deployment=sas-viya,!sas.com/zero-scale-phase
          namespace: $namespace
          resource: distributedredisclusters
      - args:
        - delete
        - --namespace
        - $namespace
        - --wait
        - --timeout
        - $timeout
        - --ignore-not-found
        - espserver
        - --all
        cmd: kubectl
        when: (.ClusterDefinitions (((.NewClusterDefinitionsIterationSpec).WithGroup "iot.sas.com").WithResource "espservers"))
      - args:
        - wait
        - --namespace
        - $namespace
        - --for
        - delete
        - pod
        - --selector
        - app.kubernetes.io/managed-by=sas-cas-operator
        - --timeout
        - $timeout
        cmd: kubectl
      - args:
        - wait
        - --namespace
        - $namespace
        - --for
        - delete
        - pod
        - --selector
        - vendor=crunchydata,role
        - --timeout
        - $timeout
        cmd: kubectl
      - args:
        - wait
        - --namespace
        - $namespace
        - --for
        - delete
        - pod
        - --selector
        - managed-by=redis-cluster-operator
        - --timeout
        - $timeout
        cmd: kubectl
      - args:
        - --namespace
        - $namespace
        - delete
        - job
        - --selector
        - sas.com/created-by=sas-launcher
        - --wait
        - --timeout
        - $timeout
        cmd: kubectl
      - args:
        - --namespace
        - $namespace
        - delete
        - pod
        - --selector
        - sas.com/created-by=sas-launcher
        - --wait
        - --timeout
        - $timeout
        cmd: kubectl
      - args:
        - scale
        - --namespace
        - $namespace
        - deployments
        - --replicas
        - "0"
        - --selector
        - sas.com/deployment=sas-viya,sas.com/zero-scale-phase=1
        cmd: kubectl
  - |
    version-check=apiVersion: orchestration.sas.com/v3beta6
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      labels:
        participate.lifecycle.sas.com/assess: "true"
      name: version-check
    spec:
      args:
      - name: namespace
        required: true
      - name: manifest
        required: true
      source: |-
        package main
        import (
          "fmt"
          "sas/orchestration/lifecycle"
          ca "sas/orchestration/lifecycle/cadence"
          cls "sas/orchestration/lifecycle/cluster"
          man "sas/orchestration/lifecycle/manifest"
        )
        func main() {
          manifest := lifecycle.Arg("manifest")
          namespace := lifecycle.Arg("namespace")
  
          manifestInfo := getManifestInfo(manifest)
          if manifestInfo == nil {
            return // should this be a failure?
          }
  
          clusterInfo := getClusterInfo(namespace)
          err := ca.VerifyUpdateIsAllowed(clusterInfo, manifestInfo)
          if err != nil {
            lifecycle.Fail(err.Error())
          }
        }
        func getManifestInfo(manifest string) ca.CadenceInfo {
          manifestConfigMaps, err := man.Resources(manifest, man.Kind("ConfigMap"), man.LabelSelector("orchestration.sas.com/lifecycle=metadata"))
          if err != nil {
            panic(err)
          }
          switch len(manifestConfigMaps) {
          case 0:
            return nil
          case 1:
            return ca.NewCadenceInfoFromConfigMap(manifestConfigMaps[0])
          default:
            panic("Error: Failed to find a unique lifecycle metadata ConfigMap in the manifest")
          }
        }
        func getClusterInfo(namespace string) ca.CadenceInfo {
          clusterConfigMaps, err := cls.Resources(cls.Namespace(namespace), cls.Resource("ConfigMap"), cls.LabelSelector("orchestration.sas.com/lifecycle=metadata"))
          if err != nil {
            panic(err)
          }
          switch len(clusterConfigMaps) {
          case 0:
            return nil
          case 1:
            return ca.NewCadenceInfoFromConfigMap(clusterConfigMaps[0])
          default:
            panic("Error: Failed to find a unique lifecycle metadata ConfigMap in the cluster")
          }
        }
  - |
    version-check-lib=apiVersion: orchestration.sas.com/v3beta6
    kind: LifecycleOperation
    metadata:
      annotations:
        sas.com/component-name: sas-k8s-common
        sas.com/component-version: 2.56.2-20220919.1663599580201
      creationTimestamp: null
      name: version-check-lib
    spec:
      source: |-
        package versionchecklib
        import (
          "sas/orchestration/lifecycle/cadence"
        )
        type VersionInfo struct {
          Cadence string
          Version string
          Release string
        }
        type ManifestVersionInfo struct {
          VersionInfo
          BaseCadence string
          BaseVersion string
        }
        // IsUpdateAllowed returns nil if updating from the clusterInfo to the
        // manifestInfo is allowed. Otherwise, it returns the appropriate error.
        //
        // THIS FUNCTION IS DEPRECATED
        //
        // Callers should convert to v3beta6 and leverage direct calls into the
        // cadence library. See the version-check assess operation for an
        // example.
        func IsUpdateAllowed(clusterInfo VersionInfo, manifestInfo ManifestVersionInfo) error {
          clusterCadence := cadence.NewCadenceInfo(clusterInfo.Cadence, clusterInfo.Version, clusterInfo.Release)
          manifestCadence := cadence.NewCadenceInfoWithBase(manifestInfo.Cadence, manifestInfo.Version, manifestInfo.Release, manifestInfo.BaseCadence, manifestInfo.BaseVersion)
          return cadence.VerifyUpdateIsAllowed(clusterCadence, manifestCadence)
        }
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-access-config
literals:
- COPLIB=
- DB2=
- DB2_BIN=
- DIRLAX=
- DSQUERY=
- HANA=
- IMPALA=
- JDBCDRIVERS=/data-drivers/jdbc:/opt/sas/viya/home/lib64/accessclients/jdbc
- MONGODB=
- MYSQL=
- NETEZZA=
- NZ_ODBC_INI_PATH=
- ODBCHOME=/opt/sas/viya/home/lib64/accessclients
- ODBCINI=/opt/sas/viya/home/lib64/accessclients/odbc.ini
- ODBCINST=/opt/sas/viya/home/lib64/accessclients/odbcinst.ini
- ODBCSYSINI=/opt/sas/viya/home/lib64/accessclients/
- ORACLE=
- ORACLE_BIN=
- ORACLE_HOME=
- POSTGRES=/opt/sas/viya/home/lib64
- R3=
- SAPCRYPTO_LIB=
- SASODBC=/opt/sas/viya/home/lib64/accessclients/lib
- SAS_EXT_CLSPTH_ACCESS=
- SAS_EXT_LLP_ACCESS=/opt/sas/viya/home/lib64/accessclients/lib:/opt/sas/viya/home/lib64
- SAS_EXT_PATH_ACCESS=
- SECUDIR=
- SYBASE=
- SYBASELIBS=
- SYBASE_BIN=
- SYB_SAS_BULK_NOTE=1
- TERADATA=
- THIRD_PARTY_BIN=
- THIRD_PARTY_LIB=
- TNS_ADMIN=
- UNIXODBC=
- VERTICA=
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-activities-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=activities
- SAS_DU_NAME=sas-activities
- SAS_SERVICE_NAME=sas-activities
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=activities
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-admin-content-loader-parameters
literals:
- SAS_DU_NAME=sas-admin-content-loader
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-components-parameters
literals:
- SAS_CONTEXT_PATH=analyticsComponents
- SAS_PORT_NAME=aacomponents
- SAS_SERVICE_NAME=sas-analytics-components
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-data-segmentation-parameters
literals:
- SAS_CONTEXT_PATH=analyticsDataSegmentation
- SAS_PORT_NAME=aasegmentatn
- SAS_SERVICE_NAME=sas-analytics-data-segmentation
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-events-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=analyticsEvents
- SAS_DU_NAME=sas-analytics-events
- SAS_SERVICE_NAME=sas-analytics-events
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=analytics-events
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-flows-parameters
literals:
- SAS_CONTEXT_PATH=analyticsFlows
- SAS_PORT_NAME=aaflows
- SAS_SERVICE_NAME=sas-analytics-flows
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-gateway-parameters
literals:
- SAS_CONTEXT_PATH=analyticsGateway
- SAS_PORT_NAME=aagateway
- SAS_SERVICE_NAME=sas-analytics-gateway
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-localization-parameters
literals:
- SAS_CONTEXT_PATH=analyticsLocalization
- SAS_PORT_NAME=aacaploclztn
- SAS_SERVICE_NAME=sas-analytics-localization
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-pipelines-parameters
literals:
- SAS_CONTEXT_PATH=analyticsPipelines
- SAS_PORT_NAME=aapipelines
- SAS_SERVICE_NAME=sas-analytics-pipelines
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-resources-root-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_DU_NAME=sas-analytics-resources
- SAS_SERVICE_NAME=sas-analytics-resources
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=analytics-resources
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-services-parameters
literals:
- SAS_DU_NAME=sas-analytics-services
- SAS_SERVICE_NAME=sas-analytics-services
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-analytics-validation-parameters
literals:
- SAS_CONTEXT_PATH=analyticsValidation
- SAS_PORT_NAME=aavalidation
- SAS_SERVICE_NAME=sas-analytics-validation
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-annotations-parameters
literals:
- SAS_CONTEXT_PATH=annotations
- SAS_DU_NAME=sas-annotations
- SAS_SERVICE_NAME=sas-annotations
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=annotations
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-app-registry-parameters
literals:
- SAS_CONTEXT_PATH=appRegistry
- SAS_DU_NAME=sas-app-registry
- SAS_SERVICE_NAME=sas-app-registry
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=app-registry
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-arke-parameters-h6hk5cgm5b
literals:
- SAS_DU_NAME=sas-arke
- SAS_SERVICE_NAME=sas-arke
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-audit-parameters
literals:
- SAS_CONTEXT_PATH=audit
- SAS_DU_NAME=sas-audit
- SAS_SERVICE_NAME=sas-audit
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=audit
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-authorization-parameters
literals:
- SAS_CONTEXT_PATH=authorization
- SAS_DU_NAME=sas-authorization
- SAS_SERVICE_NAME=sas-authorization
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-backup-agent-parameters
literals:
- SAS_CONTEXT_PATH=backupagent
- SAS_DU_NAME=sas-backup-agent
- SAS_SERVICE_NAME=sas-backup-agent
- SAS_TOOL_RETRY_LIMIT=100
- SAS_TOOL_RETRY_PERIOD=1m
- SG_PROJECT=backup-agent
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-backup-job-parameters
literals:
- JOB_TIME_OUT=1200
- RETENTION_PERIOD=30
- SAS_BACKUP_JOB_DU_NAME=sas-backup-job
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-batch-cmd-pod-template-parameters
literals:
- SAS_CONTAINER_NAME=sas-batch-cmd
- SAS_SERVICE_NAME=sas-batch-cmd-pod-template
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-batch-parameters
literals:
- SAS_CONTEXT_PATH=batch
- SAS_DU_NAME=sas-batch
- SAS_SERVICE_NAME=sas-batch
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=batch
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-batch-pod-template-parameters
literals:
- SAS_SERVICE_NAME=sas-batch-pod-template
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-batch-server-config
literals:
- BATCHSERVER_AUTOEXEC_USERMODS_FILE=autoexec_usermods.sas
- BATCHSERVER_CONFIG_USERMODS_FILE=sasv9_usermods.cfg
- BATCHSERVER_SCRIPT_USERMODS_FILE=batchserver_usermods.sh
- BATCHSERVER_USER_CONFIG=/config/
- CONNECTSERVER_AUTOEXEC_USERMODS_FILE=autoexec_usermods.sas
- CONNECTSERVER_CONFIG_USERMODS_FILE=sasv9_usermods.cfg
- CONNECTSERVER_SCRIPT_USERMODS_FILE=connectserver_usermods.sh
- CONNECTSERVER_USER_CONFIG=/config/connectserver/
- SAS_INIT_CONFIG_FILE1=batchserver_usermods.sh
- SAS_INIT_CONFIG_FILE2=sasv9_usermods.cfg
- SAS_INIT_CONFIG_FILE3=autoexec_usermods.sas
- SAS_INIT_CONFIG_FILE_CONNECTSERVER_AUTOEXEC=connectserver/autoexec_usermods.sas
- SAS_INIT_CONFIG_FILE_CONNECTSERVER_USERMODS=connectserver/connectserver_usermods.sh
- SAS_INIT_CONFIG_FILE_CONNECTSERVER_V9USERMODS=connectserver/sasv9_usermods.cfg
- SAS_INIT_CONFIG_FILE_RESTROPTS=rsasv9.cfg
- SAS_INIT_CONFIG_KEY1=config/batch/sas.batch.server/startup_commands/contents
- SAS_INIT_CONFIG_KEY2=config/batch/sas.batch.server/configuration_options/contents
- SAS_INIT_CONFIG_KEY3=config/batch/sas.batch.server/autoexec_code/contents
- SAS_INIT_CONFIG_KEY_CONNECTSERVER_AUTOEXEC=config/connect-spawner-viya/sas.connect.server/autoexec_code/contents
- SAS_INIT_CONFIG_KEY_CONNECTSERVER_USERMODS=config/connect-spawner-viya/sas.connect.server/startup_commands/contents
- SAS_INIT_CONFIG_KEY_CONNECTSERVER_V9USERMODS=config/connect-spawner-viya/sas.connect.server/configuration_options/contents
- SAS_INIT_CONFIG_KEY_RESTROPTS=config/batch/sas.batch.server/restricted_options/contents
- SAS_LANG_FILE_IN=/config/batchserver_usermods.sh
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cachelocator-parameters
literals:
- SAS_CONTEXT_PATH=cachelocator
- SAS_DU_NAME=sas-cachelocator
- SAS_SERVICE_NAME=sas-cachelocator
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cacheserver-parameters
literals:
- SAS_CONTEXT_PATH=cacheserver
- SAS_DU_NAME=sas-cacheserver
- SAS_SERVICE_NAME=sas-cacheserver
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cas-access-management-parameters
literals:
- SAS_CONTEXT_PATH=casAccessManagement
- SAS_PORT_NAME=casacl
- SAS_SERVICE_NAME=sas-cas-access-management
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cas-control-parameters
literals:
- SAS_CONTEXT_PATH=sas-cas-control
- SAS_DU_NAME=sas-cas-control
- SAS_PORT_NAME=cas-control
- SAS_SERVICE_NAME=sas-cas-control
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=cas-control
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cas-formats-parameters
literals:
- SAS_CONTEXT_PATH=casFormats
- SAS_PORT_NAME=cas-formats
- SAS_SERVICE_NAME=sas-cas-formats
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cas-management-parameters
literals:
- SAS_CONTEXT_PATH=casManagement
- SAS_PORT_NAME=casmanagement
- SAS_SERVICE_NAME=sas-cas-management
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cas-operator-parameters
literals:
- SAS_DU_NAME=sas-cas-operator
- SAS_SERVICE_NAME=sas-cas-operator
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cas-pod-template-parameters
literals:
- SAS_SERVICE_NAME=sas-cas-pod-template
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cas-proxy-parameters
literals:
- SAS_CONTEXT_PATH=casProxy
- SAS_PORT_NAME=casproxy
- SAS_SERVICE_NAME=sas-cas-proxy
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-cas-row-sets-parameters
literals:
- SAS_CONTEXT_PATH=casRowSets
- SAS_PORT_NAME=cas-row-sets
- SAS_SERVICE_NAME=sas-cas-row-sets
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-catalog-database-config
literals:
- SAS_CATALOG_PERSISTENCE=postgres
- SAS_DATABASE_MAXACTIVE=22
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-catalog-parameters
literals:
- SAS_CONTEXT_PATH=catalog
- SAS_PORT_NAME=catalog
- SAS_SERVICE_NAME=sas-catalog
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-catalog-security-config
literals:
- SAS_CATALOG_ENHANCED_SECURITY=true
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-catalog-services-config
literals:
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-catalog-services-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_DU_NAME=sas-catalog-services
- SAS_PORT_NAME=catalog-services
- SAS_SERVICE_NAME=sas-catalog-services
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=catalog
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-catalog-table-bot-parameters
literals:
- SAS_CONTEXT_PATH=catalogTableBot
- SAS_PORT_NAME=catalogtablebot
- SAS_SERVICE_NAME=sas-catalog-table-bot
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-code-debugger-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASCodeDebugger
- SAS_DU_NAME=sas-code-debugger-app
- SAS_SERVICE_NAME=sas-code-debugger-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=code-debugger-app
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-code-debugger-parameters
literals:
- SAS_CONTEXT_PATH=codeDebugger
- SAS_DU_NAME=sas-code-debugger
- SAS_SERVICE_NAME=sas-code-debugger
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=code-debugger
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-comments-parameters
literals:
- SAS_CONTEXT_PATH=comments
- SAS_DU_NAME=sas-comments
- SAS_SERVICE_NAME=sas-comments
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=comments
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-commonfiles-parameters
literals:
- SAS_CONTEXT_PATH=commonfiles
- SAS_DU_NAME=sas-commonfiles
- SAS_JOB_NAME=sas-commonfiles
- SAS_SERVICE_NAME=sas-commonfiles
options:
  labels:
    app.kubernetes.io/name: sas-commonfiles
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-compute-job-config-parameters
literals:
- SAS_SERVICE_NAME=sas-compute-job-config
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-compute-parameters
literals:
- SAS_CONTEXT_PATH=compute
- SAS_DU_NAME=sas-compute
- SAS_SERVICE_NAME=sas-compute
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=compute
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-compute-server-config
literals:
- AUTOEXEC_USERMODS_FILE=autoexec.sas
- COMPUTESERVER_USER_CONFIG=/config/
- COMPUTESERVER_VAR_PATH=/viya/
- CONFIG_USERMODS_FILE=sasv9.cfg
- CONNECTSERVER_AUTOEXEC_USERMODS_FILE=autoexec_usermods.sas
- CONNECTSERVER_CONFIG_USERMODS_FILE=sasv9_usermods.cfg
- CONNECTSERVER_SCRIPT_USERMODS_FILE=connectserver_usermods.sh
- CONNECTSERVER_USER_CONFIG=/config/connectserver/
- SAS_INIT_CONFIG_FILE1=autoexec.sas
- SAS_INIT_CONFIG_FILE2=sasv9.cfg
- SAS_INIT_CONFIG_FILE3=startscript.sh
- SAS_INIT_CONFIG_FILE_CONNECTSERVER_AUTOEXEC=connectserver/autoexec_usermods.sas
- SAS_INIT_CONFIG_FILE_CONNECTSERVER_USERMODS=connectserver/connectserver_usermods.sh
- SAS_INIT_CONFIG_FILE_CONNECTSERVER_V9USERMODS=connectserver/sasv9_usermods.cfg
- SAS_INIT_CONFIG_FILE_LOGCONFIG=logconfig.xml
- SAS_INIT_CONFIG_FILE_RESTROPTS=rsasv9.cfg
- SAS_INIT_CONFIG_KEY1=config/compute/sas.compute.server/autoexec_code/contents
- SAS_INIT_CONFIG_KEY2=config/compute/sas.compute.server/configuration_options/contents
- SAS_INIT_CONFIG_KEY3=config/compute/sas.compute.server/startup_commands/contents
- SAS_INIT_CONFIG_KEY_CONNECTSERVER_AUTOEXEC=config/connect-spawner-viya/sas.connect.server/autoexec_code/contents
- SAS_INIT_CONFIG_KEY_CONNECTSERVER_USERMODS=config/connect-spawner-viya/sas.connect.server/startup_commands/contents
- SAS_INIT_CONFIG_KEY_CONNECTSERVER_V9USERMODS=config/connect-spawner-viya/sas.connect.server/configuration_options/contents
- SAS_INIT_CONFIG_KEY_LOGCONFIG=config/compute/sas.compute.server/logconfig/contents
- SAS_INIT_CONFIG_KEY_RESTROPTS=config/compute/sas.compute.server/restricted_options/contents
- SAS_LANG_FILE_IN=/config/startscript.sh
- SCRIPT_USERMODS_FILE=startscript.sh
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-config-reconciler-parameters
literals:
- SAS_CONTEXT_PATH=configReconciler
- SAS_DU_NAME=sas-config-reconciler
- SAS_SERVICE_NAME=sas-config-reconciler
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=config-reconciler
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-configuration-parameters
literals:
- SAS_CONTEXT_PATH=configuration
- SAS_DU_NAME=sas-configuration
- SAS_SERVICE_NAME=sas-configuration
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=configuration
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-connect-parameters
literals:
- SAS_CONTEXT_PATH=connect
- SAS_DU_NAME=sas-connect
- SAS_SERVICE_NAME=sas-connect
- SG_GO_MODULES_ENABLED=true
- SG_PROJECT=connect
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-connect-pod-template-parameters
literals:
- SAS_SERVICE_NAME=sas-connect-pod-template
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-connect-spawner-config
literals:
- CONNECTSERVER_AUTOEXEC_USERMODS_FILE=autoexec_usermods.sas
- CONNECTSERVER_CONFIG_USERMODS_FILE=sasv9_usermods.cfg
- CONNECTSERVER_SCRIPT_USERMODS_FILE=connectserver_usermods.sh
- CONNECTSERVER_USER_CONFIG=/config/
- CONNECTSPAWNER_SCRIPT_USERMODS_FILE=connect_usermods.sh
- CONNECTSPAWNER_USER_CONFIG=/config/
- SASCLOUDNATIVE=1
- SAS_INIT_CONFIG_FILE1=connect_usermods.sh
- SAS_INIT_CONFIG_FILE2=connectserver_usermods.sh
- SAS_INIT_CONFIG_FILE3=sasv9_usermods.cfg
- SAS_INIT_CONFIG_FILE4=autoexec_usermods.sas
- SAS_INIT_CONFIG_FILE5=rsasv9.cfg
- SAS_INIT_CONFIG_FILE6=customlogconfig-spawner.xml
- SAS_INIT_CONFIG_FILE7=customlogconfig-server.xml
- SAS_INIT_CONFIG_KEY1=config/connect-spawner-viya/sas.connect.spawner/startup_commands/contents
- SAS_INIT_CONFIG_KEY2=config/connect-spawner-viya/sas.connect.server/startup_commands/contents
- SAS_INIT_CONFIG_KEY3=config/connect-spawner-viya/sas.connect.server/configuration_options/contents
- SAS_INIT_CONFIG_KEY4=config/connect-spawner-viya/sas.connect.server/autoexec_code/contents
- SAS_INIT_CONFIG_KEY5=config/connect-spawner-viya/sas.connect.server/restricted_options/contents
- SAS_INIT_CONFIG_KEY6=config/connect-spawner-viya/sas.connect.spawner/logconfig/contents
- SAS_INIT_CONFIG_KEY7=config/connect-spawner-viya/sas.connect.server/logconfig/contents
- SAS_LANG_FILE_IN=/config/connectserver_usermods.sh
- USERMODS=-NOSCRIPT
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-connect-spawner-parameters
literals:
- SAS_DU_NAME=sas-connect-spawner
- SAS_SERVICE_NAME=sas-connect-spawner
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-consul-config
literals:
- SITEDEFAULT_CONF=
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-consul-server-parameters
literals:
- SAS_DU_NAME=sas-consul-server
- SAS_SERVICE_NAME=sas-consul-server
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-conversation-designer-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASConversationDesigner
- SAS_DU_NAME=sas-conversation-designer-app
- SAS_SERVICE_NAME=sas-conversation-designer-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=conversation-designer-app
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-credentials-parameters
literals:
- SAS_CONTEXT_PATH=credentials
- SAS_DU_NAME=sas-credentials
- SAS_SERVICE_NAME=sas-credentials
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-crossdomainproxy-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=crossdomainproxy
- SAS_DU_NAME=sas-crossdomainproxy
- SAS_SERVICE_NAME=sas-crossdomainproxy
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=crossdomainproxy
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-connections-parameters
literals:
- SAS_CONTEXT_PATH=dataConnections
- SAS_PORT_NAME=dataconnections
- SAS_SERVICE_NAME=sas-data-connections
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-discovery-parameters
literals:
- SAS_CONTEXT_PATH=dataDiscovery
- SAS_PORT_NAME=datadiscovery
- SAS_SERVICE_NAME=sas-data-discovery
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-explorer-app-parameters
literals:
- JAVA_OPTION_FJPCP=java.util.concurrent.ForkJoinPool.common.parallelism=16
- SAS_CONTEXT_PATH=SASDataExplorer
- SAS_DU_NAME=sas-data-explorer-app
- SAS_SERVICE_NAME=sas-data-explorer-app
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-flows-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=dataFlows
- SAS_DU_NAME=sas-data-flows
- SAS_SERVICE_NAME=sas-data-flows
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=data-flows
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-mining-models-parameters
literals:
- SAS_CONTEXT_PATH=dataMiningModels
- SAS_DU_NAME=sas-data-mining-models
- SAS_SERVICE_NAME=sas-data-mining-models
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=data-mining-models
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-mining-parameters
literals:
- SAS_CONTEXT_PATH=dataMining
- SAS_DU_NAME=sas-data-mining
- SAS_SERVICE_NAME=sas-data-mining
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-mining-project-resources-parameters
literals:
- SAS_CONTEXT_PATH=dataMiningProjectResources
- SAS_SERVICE_NAME=sas-data-mining-project-resources
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-mining-project-resources-root-parameters
literals:
- SAS_CONTEXT_PATH=sas-data-mining-project-resources
- SAS_DU_NAME=sas-data-mining-project-resources
- SAS_PORT_NAME=data-mining-project-resources
- SAS_SERVICE_NAME=sas-data-mining-project-resources
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=data-mining-project-resources
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-mining-project-settings-parameters
literals:
- SAS_CONTEXT_PATH=dataMiningProjectSettings
- SAS_SERVICE_NAME=sas-data-mining-project-settings
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-mining-results-parameters
literals:
- SAS_CONTEXT_PATH=dataMiningResults
- SAS_SERVICE_NAME=sas-data-mining-results
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-mining-results-root-parameters
literals:
- SAS_CONTEXT_PATH=sas-data-mining-results
- SAS_DU_NAME=sas-data-mining-results
- SAS_SERVICE_NAME=sas-data-mining-results
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=data-mining-results
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-mining-warehouse-parameters
literals:
- SAS_CONTEXT_PATH=dataMiningWarehouse
- SAS_SERVICE_NAME=sas-data-mining-warehouse
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-plans-parameters
literals:
- SAS_CONTEXT_PATH=dataPlans
- SAS_DU_NAME=sas-data-plans
- SAS_SERVICE_NAME=sas-data-plans
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-quality-parameters
literals:
- SAS_CONTEXT_PATH=dataQuality
- SAS_PORT_NAME=dataquality
- SAS_SERVICE_NAME=sas-data-quality
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-quality-services-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_DU_NAME=sas-data-quality-services
- SAS_PORT_NAME=dq-services
- SAS_SERVICE_NAME=sas-data-quality-services
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=data-quality
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-server-operator-parameters
literals:
- SAS_CUSTOM_RESOURCE_API_GROUP=webinfdsvr.sas.com
- SAS_CUSTOM_RESOURCE_NAME=pgcluster
- SAS_CUSTOM_RESOURCE_NAME_PLURAL=pgclusters
- SAS_DU_NAME=sas-data-server-operator
- SAS_SERVICE_NAME=sas-data-server-operator
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=data-server
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-sources-parameters
literals:
- SAS_CONTEXT_PATH=dataSources
- SAS_PORT_NAME=datasources
- SAS_SERVICE_NAME=sas-data-sources
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-sources-root-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_DU_NAME=sas-data-sources
- SAS_PORT_NAME=data-sources
- SAS_SERVICE_NAME=sas-data-sources
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=data-sources
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-studio-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASDataStudio
- SAS_DU_NAME=sas-data-studio-app
- SAS_SERVICE_NAME=sas-data-studio-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=data-studio-app
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-data-tables-parameters
literals:
- SAS_CONTEXT_PATH=dataTables
- SAS_PORT_NAME=datatables
- SAS_SERVICE_NAME=sas-data-tables
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-decisions-runtime-builder-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=decisionsRuntimeBuilder
- SAS_DU_NAME=sas-decisions-runtime-builder
- SAS_SERVICE_NAME=sas-decisions-runtime-builder
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=decisions-runtime-builder
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-deployment-data-parameters
literals:
- SAS_CONTEXT_PATH=deploymentData
- SAS_DU_NAME=sas-deployment-data
- SAS_SERVICE_NAME=sas-deployment-data
- SG_GO_MODULES_ENABLED=true
- SG_PROJECT=deployment-data
- SG_TEST_TAGS=testca
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-deployment-metadata
literals:
- SAS_BASE_CADENCE_NAME=stable
- SAS_BASE_CADENCE_VERSION=2022.09
- SAS_BUILD_TYPE=x64_oci_linux_2-docker
- SAS_CADENCE_DISPLAY_NAME=Long-Term Support 2022.09
- SAS_CADENCE_DISPLAY_SHORT_NAME=Long-Term Support
- SAS_CADENCE_DISPLAY_VERSION=2022.09
- SAS_CADENCE_NAME=lts
- SAS_CADENCE_RELEASE=20230118.1674078543929
- SAS_CADENCE_VERSION=2022.09
- SAS_DEPLOYMENT_TYPE=default
- SAS_REPOSITORY_WAREHOUSE_URL=https://ses.sas.download/ses
options:
  labels:
    orchestration.sas.com/lifecycle: metadata
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-device-management-parameters
literals:
- SAS_CONTEXT_PATH=deviceManagement
- SAS_DU_NAME=sas-device-management
- SAS_SERVICE_NAME=sas-device-management
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=device-management
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-discovery-table-provider-parameters
literals:
- SAS_CONTEXT_PATH=discoveryTableProvider
- SAS_PORT_NAME=dscvrytblprvdr
- SAS_SERVICE_NAME=sas-discovery-table-provider
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-drive-app-parameters
literals:
- SAS_CONTEXT_PATH=SASDrive
- SAS_DU_NAME=sas-drive-app
- SAS_SERVICE_NAME=sas-drive-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=drive-app
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-drive-app-root-parameters-t6cfc66bdf
literals:
- SAS_CONTEXT_PATH=SASDrive
- SAS_SERVICE_NAME=sas-drive-app-root
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-drive-parameters
literals:
- SAS_CONTEXT_PATH=drive
- SAS_DU_NAME=sas-drive
- SAS_SERVICE_NAME=sas-drive
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=drive
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-environment-manager-app-parameters
literals:
- SAS_CONTEXT_PATH=SASEnvironmentManager
- SAS_DU_NAME=sas-environment-manager-app
- SAS_SERVICE_NAME=sas-environment-manager-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=environment-manager
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-event-monitor-parameters
literals:
- SAS_CONTEXT_PATH=eventMonitor
- SAS_DU_NAME=sas-event-monitor
- SAS_SERVICE_NAME=sas-event-monitor
- SG_GO_MODULES_ENABLED=true
- SG_PROJECT=event-monitor
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-feature-flags-parameters
literals:
- SAS_CONTEXT_PATH=featureFlags
- SAS_DU_NAME=sas-feature-flags
- SAS_SERVICE_NAME=sas-feature-flags
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=feature-flags
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-files-parameters
literals:
- SAS_CONTEXT_PATH=files
- SAS_DU_NAME=sas-files
- SAS_SERVICE_NAME=sas-files
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-folders-parameters
literals:
- SAS_CONTEXT_PATH=folders
- SAS_DU_NAME=sas-folders
- SAS_SERVICE_NAME=sas-folders
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=folders
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-fonts-parameters
literals:
- SAS_CONTEXT_PATH=fonts
- SAS_DU_NAME=sas-fonts
- SAS_SERVICE_NAME=sas-fonts
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=fonts
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-formats-parameters
literals:
- SAS_CONTEXT_PATH=formats
- SAS_DU_NAME=sas-formats
- SAS_FMTSRV_PAYLOAD_SIZE_LIMIT=280000
- SAS_FMTSRV_PORT=9080
- SAS_FMT_VALIDATE_JSON=true
- SAS_SERVICE_NAME=sas-formats
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=formats
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-geo-enrichment-parameters
literals:
- SAS_CONTEXT_PATH=geoEnrichment
- SAS_DU_NAME=sas-geo-enrichment
- SAS_SERVICE_NAME=sas-geo-enrichment
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=geo-enrichment
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-glossary-parameters
literals:
- SAS_CONTEXT_PATH=glossary
- SAS_PORT_NAME=glossary
- SAS_SERVICE_NAME=sas-glossary
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-go-config
literals:
- CONSUL_HTTP_ADDR=http://sas-consul-server:8500
- SAS_BOOTSTRAP_HTTP_CLIENT_TIMEOUT_REQUEST=5m
- SAS_RECONCILER_SERVICES_ENABLED=true
- SAS_REGISTRY_REGISTER_ENABLED=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-graph-builder-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASGraphBuilder
- SAS_DU_NAME=sas-graph-builder-app
- SAS_SERVICE_NAME=sas-graph-builder-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=graph-builder
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-graph-templates-parameters
literals:
- SAS_CONTEXT_PATH=graphTemplates
- SAS_DU_NAME=sas-graph-templates
- SAS_SERVICE_NAME=sas-graph-templates
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=graph-templates
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-identities-parameters
literals:
- SAS_CONTEXT_PATH=identities
- SAS_DU_NAME=sas-identities
- SAS_SERVICE_NAME=sas-identities
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-import-9-parameters
literals:
- SAS_CONTEXT_PATH=import9
- SAS_DU_NAME=sas-import-9
- SAS_SERVICE_NAME=sas-import-9
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-import-data-loader-parameters
literals:
- SAS_DU_NAME=sas-import-data-loader
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-information-catalog-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASInformationCatalog
- SAS_DU_NAME=sas-information-catalog-app
- SAS_SERVICE_NAME=sas-information-catalog-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=catalog-app
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-insights-parameters
literals:
- SAS_CONTEXT_PATH=insights
- SAS_DU_NAME=sas-insights
- SAS_FMTSRV_PORT=9080
- SAS_SERVICE_NAME=sas-insights
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=insights
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-inventory-collector-parameters
literals:
- SAS_DU_NAME=sas-inventory-collector
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-java-config
literals:
- CONSUL_HTTP_ADDR=http://sas-consul-server:8500
- JAVA_OPTION_GEODE_LOG=-Dlogging.level.org.apache.geode.internal.net.SocketCreator=ERROR
- JAVA_OPTION_SERVER_PORT=-Dserver.port=8080
- SASLOGROOT=
- SAS_FEATURE_FLAGS_ENABLED=true
- SAS_GUEST_BOOTSTRAPPING_ENABLED=true
- SAS_LOG_FORMAT=json
- SAS_REGISTRY_REGISTER_ENABLED=false
- SAS_SERVICES_METRICS_SECURED=false
- SPRING_CLOUD_CONSUL_DISCOVERY_PREFERIPADDRESS=true
- SPRING_CLOUD_CONSUL_DISCOVERY_REGISTER=false
- SPRING_CLOUD_CONSUL_ENABLED=true
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-job-definitions-parameters
literals:
- SAS_CONTEXT_PATH=jobDefinitions
- SAS_SERVICE_NAME=sas-job-definitions
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-job-execution-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASJobExecution
- SAS_DU_NAME=sas-job-execution-app
- SAS_SERVICE_NAME=sas-job-execution-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=jobexecapp
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-job-execution-parameters
literals:
- SAS_CONTEXT_PATH=jobExecution
- SAS_SERVICE_NAME=sas-job-execution
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-job-execution-root-parameters
literals:
- SAS_DU_NAME=sas-job-execution
- SAS_SERVICE_NAME=sas-job-execution
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-job-flow-scheduling-flow-orchestrator-pod-template-parameters
literals:
- SAS_SERVICE_NAME=sas-job-flow-scheduling-flow-orchestrator-pod-template
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-job-flow-scheduling-parameters
literals:
- SAS_CONTEXT_PATH=jobFlowScheduling
- SAS_DU_NAME=sas-job-flow-scheduling
- SAS_SERVICE_NAME=sas-job-flow-scheduling
- SG_PROJECT=jobflow-scheduling
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-launcher-init-nls-config
literals:
- SAS_LAUNCHER_INIT_ENCODING_DEFAULT=utf8
- SAS_LAUNCHER_INIT_LOCALE_DEFAULT=en_US
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-launcher-job-config-parameters
literals:
- SAS_SERVICE_NAME=sas-launcher-job-config
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-launcher-lockdown-config
literals:
- VIYA_LOCKDOWN_DEFAULT_METHODS=http email ftp hadoop java
- VIYA_LOCKDOWN_ENABLE=1
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-launcher-parameters
literals:
- SAS_CONTEXT_PATH=launcher
- SAS_DU_NAME=sas-launcher
- SAS_SERVICE_NAME=sas-launcher
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-licenses-parameters
literals:
- SAS_CONTEXT_PATH=licenses
- SAS_DU_NAME=sas-deployment-data
- SAS_SERVICE_NAME=sas-licenses
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-lineage-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASLineage
- SAS_DU_NAME=sas-lineage-app
- SAS_SERVICE_NAME=sas-lineage-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=sas-lineage-app
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-links-parameters
literals:
- SAS_CONTEXT_PATH=links
- SAS_DU_NAME=sas-links
- SAS_SERVICE_NAME=sas-links
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=links
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-localization-parameters
literals:
- SAS_CONTEXT_PATH=localization
- SAS_DU_NAME=sas-localization
- SAS_SERVICE_NAME=sas-localization
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=localization
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-logon-app-parameters
literals:
- SAS_CONTEXT_PATH=SASLogon
- SAS_DU_NAME=sas-logon-app
- SAS_SERVICE_NAME=sas-logon-app
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-mail-parameters
literals:
- SAS_CONTEXT_PATH=mail
- SAS_DU_NAME=sas-mail
- SAS_SERVICE_NAME=sas-mail
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=mail
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-maps-parameters
literals:
- SAS_CONTEXT_PATH=maps
- SAS_DU_NAME=sas-maps
- SAS_SERVICE_NAME=sas-maps
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=maps
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-metering-parameters
literals:
- SAS_CONTEXT_PATH=metering
- SAS_DU_NAME=sas-deployment-data
- SAS_SERVICE_NAME=sas-metering
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-microanalytic-score-db-config
literals:
- MAS_INT_LLP_ACCESS=/opt/sas/viya/home/lib64:/usr/lib/oracle/19.5/client64/lib:/opt/sas/viya/home/lib64/accessclients/lib
- MAS_INT_LLP_POSTGRES=/opt/sas/viya/home/postgresql12/lib64
- ODBCHOME=/opt/sas/viya/home/lib64/accessclients
- ODBCINI=/opt/sas/viya/home/lib64/accessclients/odbc.ini
- ODBCINSTINI=/opt/sas/viya/home/lib64/accessclients/odbcinst.ini
- ORACLE_HOME=/usr/lib/oracle/19.5/client64
- ORAENV_ASK=NO
- PGCLIENTENCODING=UTF-8
- SASORA=V9
- TWO_TASK=ORACLE_SID
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-microanalytic-score-parameters
literals:
- SAS_CONTEXT_PATH=microanalyticScore
- SAS_DU_NAME=sas-microanalytic-score
- SAS_SERVICE_NAME=sas-microanalytic-score
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-ml-pipeline-automation-parameters
literals:
- SAS_CONTEXT_PATH=mlPipelineAutomation
- SAS_DU_NAME=sas-ml-pipeline-automation
- SAS_SERVICE_NAME=sas-ml-pipeline-automation
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=ml-pipeline-automation
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-model-management-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=modelManagement
- SAS_DU_NAME=sas-model-management
- SAS_SERVICE_NAME=sas-model-management
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=model-management
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-model-manager-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASModelManager
- SAS_DU_NAME=sas-model-manager-app
- SAS_SERVICE_NAME=sas-model-manager-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=model-manager
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-model-publish-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=modelPublish
- SAS_DU_NAME=sas-model-publish
- SAS_SERVICE_NAME=sas-model-publish
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=model-publish
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-model-repository-parameters
literals:
- SAS_CONTEXT_PATH=modelRepository
- SAS_DU_NAME=sas-model-repository
- SAS_SERVICE_NAME=sas-model-repository
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-model-studio-app-ms-parameters-25k6cm5f82
literals:
- SAS_CONTEXT_PATH=SASModelStudio
- SAS_SERVICE_NAME=sas-model-studio-app-ms
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-model-studio-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASModelStudio
- SAS_DU_NAME=sas-model-studio-app
- SAS_SERVICE_NAME=sas-model-studio-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=model-studio
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-natural-language-conversations-parameters
literals:
- SAS_CONTEXT_PATH=naturalLanguageConversations
- SAS_DU_NAME=sas-natural-language-conversations
- SAS_SERVICE_NAME=sas-natural-language-conversations
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-natural-language-generation-parameters
literals:
- SAS_CONTEXT_PATH=naturalLanguageGeneration
- SAS_DU_NAME=sas-natural-language-generation
- SAS_SERVICE_NAME=sas-natural-language-generation
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-natural-language-understanding-parameters
literals:
- SAS_CONTEXT_PATH=naturalLanguageUnderstanding
- SAS_DU_NAME=sas-natural-language-understanding
- SAS_SERVICE_NAME=sas-natural-language-understanding
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-notifications-parameters
literals:
- SAS_CONTEXT_PATH=notifications
- SAS_DU_NAME=sas-notifications
- SAS_ENTITY_REAPER_ENABLED=true
- SAS_ENTITY_REAPER_INTERVAL=24h
- SAS_ENTITY_REAPER_RETENTION=720h
- SAS_SERVICE_NAME=sas-notifications
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=notifications
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-office-addin-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASOfficeAddin
- SAS_DU_NAME=sas-office-addin-app
- SAS_SERVICE_NAME=sas-office-addin-app
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=sas-office-addin-app
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-postgres-config
literals:
- SAS_DATABASE_DATABASESERVERNAME=sas-crunchy-data-postgres
- SAS_DATABASE_SCHEMA=${application.schema}
- SPRING_DATASOURCE_DRIVER-CLASS-NAME=org.postgresql.Driver
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-preferences-parameters
literals:
- SAS_CONTEXT_PATH=preferences
- SAS_DU_NAME=sas-preferences
- SAS_SERVICE_NAME=sas-preferences
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=preferences
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-prepull-parameters
literals:
- SAS_DU_NAME=sas-prepull
- SAS_PREPULL_CRCRB_INT=30
- SAS_PREPULL_DAEMON_INT=3600
- SAS_SERVICE_NAME=sas-prepull
options:
  labels:
    app.kubernetes.io/name: sas-prepull
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-programming-environment-java-policy-config
literals:
- SAS_INIT_JRE_POLICY_AUTH=permission javax.security.auth.AuthPermission "*";
- SAS_INIT_JRE_POLICY_FILE=permission java.io.FilePermission "<<ALL FILES>>", "read, write, delete";
- SAS_INIT_JRE_POLICY_HADOOPPCP=permission javax.security.auth.PrivateCredentialPermission "org.apache.hadoop.security.Credentials * \"*\"", "read";
- SAS_INIT_JRE_POLICY_HADOOPPCP_2=permission javax.security.auth.PrivateCredentialPermission "javax.security.auth.kerberos.KerberosTicket * \"*\"", "read";
- SAS_INIT_JRE_POLICY_KERBEROS=permission javax.security.auth.kerberos.ServicePermission "*", "initiate";
- SAS_INIT_JRE_POLICY_PROPERTY=permission java.util.PropertyPermission "*", "read, write";
- SAS_INIT_JRE_POLICY_REFLECT=permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
- SAS_INIT_JRE_POLICY_RUNTIME=permission java.lang.RuntimePermission "*";
- SAS_INIT_JRE_POLICY_SECURITY=permission java.security.SecurityPermission "*";
- SAS_INIT_JRE_POLICY_SERIALIZABLE=permission java.io.SerializablePermission "*";
- SAS_INIT_JRE_POLICY_SOCKET=permission java.net.SocketPermission "*", "connect,accept,listen";
- SAS_INIT_JRE_POLICY_SQL=permission java.sql.SQLPermission "*";
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-programming-environment-path-config
literals:
- SAS_SPRE_APP_BATCH=batch
- SAS_SPRE_APP_COMPUTE=compsrv
- SAS_SPRE_APP_CONNECT=connectserver
- SAS_SPRE_VAR_PATH=/opt/sas/viya/config/var
- SAS_SPRE_VAR_PATH_LOG=log
- SAS_SPRE_VAR_PATH_RUN=run
- SAS_SPRE_VAR_PATH_SPOOL=spool
- SAS_SPRE_VAR_PATH_TMP=tmp
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-pyconfig-parameters
literals:
- SAS_CONTEXT_PATH=pyconfig
- SAS_CRONJOB_NAME=sas-pyconfig
- SAS_DU_NAME=sas-pyconfig
- SAS_SERVICE_NAME=sas-pyconfig
- default_py.cflags="-fPIC"
- default_py.configure_opts="--enable-optimizations"
- default_py.pip_install_nobinary="Prophet sas_kernel"
- default_py.pip_install_packages="Prophet sas_kernel matplotlib sasoptpy sas-esppy NeuralProphet scipy rpy2 Flask XGBoost TensorFlow pybase64 scikit-learn statsmodels sympy mlxtend Skl2onnx nbeats-pytorch ESRNN onnxruntime opencv-python zipfile38 json2 pyenchant nltk spacy gensim"
- default_py.python_signature="https://www.python.org/ftp/python/3.8.13/Python-3.8.13.tgz.asc"
- default_py.python_signer="https://keybase.io/ambv/pgp_keys.asc"
- default_py.python_tarball="https://www.python.org/ftp/python/3.8.13/Python-3.8.13.tgz"
- default_r.cflags="-fPIC"
- default_r.configure_opts="--enable-memory-profiling --enable-R-shlib --with-blas --with-lapack --with-readline=no --with-x=no"
- default_r.packages="dplyr jsonlite httr tidyverse randomForest xgboost forecast"
- default_r.r_tarball="https://cloud.r-project.org/src/base/R-4/R-4.2.2.tar.gz"
- global.enabled="false"
- global.pvc=/opt/sas/viya/home/sas-pyconfig
- global.python_enabled="false"
- global.python_profiles=default_py
- global.r_enabled="false"
- global.r_profiles=default_r
- global.status=uninitialized
options:
  labels:
    app.kubernetes.io/name: sas-pyconfig
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-qkb-bootstrap-parameters
literals:
- SAS_DU_NAME=sas-quality-knowledge-base
- SAS_SERVICE_NAME=sas-qkb-bootstrap
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-qkb-management-parameters
literals:
- SAS_CONTEXT_PATH=qkbManagement
- SAS_PORT_NAME=qkbmanagement
- SAS_SERVICE_NAME=sas-qkb-management
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-rabbitmq-server-parameters-2ck4bktd4m
literals:
- SAS_DU_NAME=sas-rabbitmq-server
- SAS_SERVICE_NAME=sas-rabbitmq-server
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-readiness-parameters
literals:
- SAS_CONTEXT_PATH=readiness
- SAS_DU_NAME=sas-readiness
- SAS_SERVICE_NAME=sas-readiness
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=readiness
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-relationships-parameters
literals:
- SAS_CONTEXT_PATH=relationships
- SAS_PORT_NAME=relationships
- SAS_SERVICE_NAME=sas-relationships
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-alerts-parameters
literals:
- SAS_CONTEXT_PATH=reportAlerts
- SAS_PORT_NAME=reportalerts
- SAS_SERVICE_NAME=sas-report-alerts
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-data-parameters
literals:
- SAS_CONTEXT_PATH=reportData
- SAS_PORT_NAME=reportdata
- SAS_SERVICE_NAME=sas-report-data
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-distribution-parameters
literals:
- SAS_CONTEXT_PATH=reportDistribution
- SAS_DU_NAME=sas-report-distribution
- SAS_SERVICE_NAME=sas-report-distribution
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=report-distribution
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-execution-parameters
literals:
- SAS_DU_NAME=sas-report-execution
- SAS_SERVICE_NAME=sas-report-execution
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-images-parameters
literals:
- SAS_CONTEXT_PATH=reportImages
- SAS_PORT_NAME=reportimages
- SAS_SERVICE_NAME=sas-report-images
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-operations-parameters
literals:
- SAS_CONTEXT_PATH=reportOperations
- SAS_DU_NAME=sas-report-operations
- SAS_SERVICE_NAME=sas-report-operations
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=report-operations
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-packages-parameters
literals:
- SAS_CONTEXT_PATH=reportPackages
- SAS_PORT_NAME=reportpackages
- SAS_SERVICE_NAME=sas-report-packages
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-renderer-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=reportRenderer
- SAS_DU_NAME=sas-report-renderer
- SAS_SERVICE_NAME=sas-report-renderer
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=report-renderer
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-services-group-parameters
literals:
- SAS_DU_NAME=sas-report-services-group
- SAS_SERVICE_NAME=sas-report-services-group
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-templates-parameters
literals:
- SAS_CONTEXT_PATH=reportTemplates
- SAS_PORT_NAME=reporttemplates
- SAS_SERVICE_NAME=sas-report-templates
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-report-transforms-parameters
literals:
- SAS_CONTEXT_PATH=reportTransforms
- SAS_PORT_NAME=reporttransform
- SAS_SERVICE_NAME=sas-report-transforms
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-reports-parameters
literals:
- SAS_CONTEXT_PATH=reports
- SAS_PORT_NAME=reports
- SAS_SERVICE_NAME=sas-reports
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-restore-job-parameters
literals:
- SAS_RESTORE_JOB_DU_NAME=sas-restore-job
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-row-sets-parameters
literals:
- SAS_CONTEXT_PATH=rowSets
- SAS_PORT_NAME=rowsets
- SAS_SERVICE_NAME=sas-row-sets
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-scheduler-parameters
literals:
- SAS_CONTEXT_PATH=scheduler
- SAS_DU_NAME=sas-scheduler
- SAS_SERVICE_NAME=sas-scheduler
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-score-definitions-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=scoreDefinitions
- SAS_DU_NAME=sas-score-definitions
- SAS_SERVICE_NAME=sas-score-definitions
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=score-definitions
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-score-execution-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=scoreExecution
- SAS_DU_NAME=sas-score-execution
- SAS_SERVICE_NAME=sas-score-execution
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=score-execution
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-search-index-parameters
literals:
- SAS_CONTEXT_PATH=searchIndex
- SAS_PORT_NAME=searchindex
- SAS_SERVICE_NAME=sas-search-index
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-search-parameters
literals:
- SAS_CONTEXT_PATH=search
- SAS_PORT_NAME=search
- SAS_SERVICE_NAME=sas-search
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-search-root-parameters
literals:
- SAS_CONTEXT_PATH=sas-search
- SAS_DU_NAME=sas-search
- SAS_SERVICE_NAME=sas-search
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=search
- SG_STATIC=false
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-shared-config
literals:
- SAS_ALLOW_ADMIN_SCRIPTS=false
- SAS_MULTI_TENANCY_ENABLED=false
- SAS_URL_SERVICE_SCHEME=http
- SAS_URL_SERVICE_TEMPLATE=http://@k8s.service.name@
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-spring-23-management-config
literals:
- MANAGEMENT_ENDPOINTS_WEB_BASEPATH=/
- MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=live, health, metrics, prometheus, ready
- MANAGEMENT_ENDPOINTS_WEB_PATHMAPPING_ENV=/internal/env
- MANAGEMENT_ENDPOINTS_WEB_PATHMAPPING_HEALTH=/internal
- MANAGEMENT_ENDPOINTS_WEB_PATHMAPPING_PROMETHEUS=/internal/metrics
- MANAGEMENT_ENDPOINT_HEALTH_GROUP_LIVE_INCLUDE=livenessState
- MANAGEMENT_ENDPOINT_HEALTH_GROUP_READY_INCLUDE=readinessState, bootstrap
- MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true
- MANAGEMENT_ENDPOINT_METRICS_ENABLED=false
- MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED=true
- MANAGEMENT_SERVER_PORT=10445
- MANAGEMENT_SERVER_SERVLET_CONTEXTPATH=/
- SAS_MANAGEMENT_INDICATOR_BOOTSTRAP_ENABLED=true
- SAS_MANAGEMENT_INDICATOR_COMMONS_ENABLED=true
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-spring-management-config
literals:
- MANAGEMENT_ENDPOINTS_WEB_BASEPATH=/internal
- MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=live, health, prometheus, ready
- MANAGEMENT_ENDPOINTS_WEB_PATHMAPPING_PROMETHEUS=metrics
- MANAGEMENT_ENDPOINT_LIVE_ENABLED=true
- MANAGEMENT_ENDPOINT_METRICS_ENABLED=false
- MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED=true
- MANAGEMENT_ENDPOINT_READY_ENABLED=true
- MANAGEMENT_SERVER_PORT=10445
- MANAGEMENT_SERVER_SERVLET_CONTEXTPATH=/
- SAS_MANAGEMENT_INDICATOR_BOOTSTRAP_ENABLED=true
- SAS_MANAGEMENT_INDICATOR_COMMONS_ENABLED=true
- SAS_MANAGEMENT_INDICATOR_LIVE_ENABLED=true
- SAS_MANAGEMENT_INDICATOR_READY_ENABLED=true
- SPRING_CLOUD_CONSUL_DISCOVERY_HEALTHCHECKPATH=/internal/health
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-start-all-parameters-f5ftdhtg4b
literals:
- SAS_CRONJOB_NAME=sas-start-all
- SAS_DU_NAME=sas-k8s-common
- SAS_SERVICE_NAME=sas-start-all
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-stop-all-parameters-g4c4d8559k
literals:
- SAS_CRONJOB_NAME=sas-stop-all
- SAS_DU_NAME=sas-k8s-common
- SAS_SERVICE_NAME=sas-stop-all
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-studio-app-parameters
literals:
- SAS_CONTEXT_PATH=SASStudio
- SAS_DU_NAME=sas-studio-app
- SAS_SERVICE_NAME=sas-studio-app
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-studio-development-parameters
literals:
- SAS_CONTEXT_PATH=studioDevelopment
- SAS_DU_NAME=sas-studio-development
- SAS_SERVICE_NAME=sas-studio-development
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=studio-development
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-studio-parameters
literals:
- SAS_CONTEXT_PATH=studio
- SAS_DU_NAME=sas-studio
- SAS_INIT_CODE_PATH=meta/sasinit
- SAS_SERVICE_NAME=sas-studio
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=studio
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-templates-parameters
literals:
- SAS_CONTEXT_PATH=templates
- SAS_DU_NAME=sas-templates
- SAS_SERVICE_NAME=sas-templates
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-theme-content-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=themeContent
- SAS_DU_NAME=sas-theme-content
- SAS_SERVICE_NAME=sas-theme-content
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=theme-content
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-theme-designer-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASThemeDesigner
- SAS_DU_NAME=sas-theme-designer-app
- SAS_SERVICE_NAME=sas-theme-designer-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=theme-designer-app
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-themes-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=themes
- SAS_DU_NAME=sas-themes
- SAS_SERVICE_NAME=sas-themes
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=themes
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-thumbnails-parameters
literals:
- SAS_CONTEXT_PATH=thumbnails
- SAS_DU_NAME=sas-thumbnails
- SAS_SERVICE_NAME=sas-thumbnails
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=thumbnails
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-transfer-parameters
literals:
- SAS_CONTEXT_PATH=transfer
- SAS_DU_NAME=sas-transfer
- SAS_SERVICE_NAME=sas-transfer
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-transformations-parameters
literals:
- SAS_CONTEXT_PATH=transformations
- SAS_PORT_NAME=transformations
- SAS_SERVICE_NAME=sas-transformations
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-transformations-root-parameters
literals:
- SAS_DU_NAME=sas-transformations
- SAS_SERVICE_NAME=sas-transformations
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-types-parameters
literals:
- SAS_CONTEXT_PATH=types
- SAS_DU_NAME=sas-types
- SAS_SERVICE_NAME=sas-types
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=types
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-visual-analytics-administration-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=visualAnalyticsAdministration
- SAS_DU_NAME=sas-visual-analytics-administration
- SAS_SERVICE_NAME=sas-visual-analytics-administration
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=visualanalyticsadministration
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-visual-analytics-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASVisualAnalytics
- SAS_DU_NAME=sas-visual-analytics-app
- SAS_GO_MULTI_MODULES=true
- SAS_SERVICE_NAME=sas-visual-analytics-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=visual-analytics
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-visual-analytics-app-viewer-parameters-gb7k6fdkd4
literals:
- SAS_CONTEXT_PATH=SASReportViewer
- SAS_SERVICE_NAME=sas-visual-analytics-app-viewer
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-visual-analytics-parameters
literals:
- SAS_CONTEXT_PATH=visualAnalytics
- SAS_DU_NAME=sas-visual-analytics
- SAS_SERVICE_NAME=sas-visual-analytics
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=visual-analytics
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-web-data-access-parameters
literals:
- SAS_CONTEXT_PATH=webDataAccess
- SAS_DU_NAME=sas-web-data-access
- SAS_SERVICE_NAME=sas-web-data-access
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=web-data-access
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-workflow-definition-history-parameters
literals:
- SAS_DU_NAME=sas-workflow-definition-history
- SAS_SERVICE_NAME=sas-workflow-definition-history
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-workflow-definition-parameters
literals:
- SAS_CONTEXT_PATH=workflowDefinition
- SAS_PORT_NAME=workflowdefn
- SAS_SERVICE_NAME=sas-workflow-definition
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-workflow-history-parameters
literals:
- SAS_CONTEXT_PATH=workflowHistory
- SAS_PORT_NAME=workflowhistory
- SAS_SERVICE_NAME=sas-workflow-history
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-workflow-manager-app-parameters
literals:
- CNTR_REPO_PREFIX=convoy
- SAS_CONTEXT_PATH=SASWorkflowManager
- SAS_DU_NAME=sas-workflow-manager-app
- SAS_SERVICE_NAME=sas-workflow-manager-app
- SG_GO_MODULES_ENABLED=true
- SG_GO_MULTI_MODULES=true
- SG_PROJECT=workflow-manager
---
apiVersion: builtin
kind: ConfigMapGenerator
metadata:
  name: sas-workflow-parameters
literals:
- SAS_CONTEXT_PATH=workflow
- SAS_DU_NAME=sas-workflow
- SAS_SERVICE_NAME=sas-workflow
